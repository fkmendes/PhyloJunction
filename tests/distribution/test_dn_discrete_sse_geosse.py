import unittest
import math
import statistics

# pj imports
import phylojunction.utility.helper_functions as pjh
import phylojunction.calculation.discrete_sse as sseobj
import phylojunction.distribution.dn_discrete_sse as distsse

__author__ = "Fabio K. Mendes"
__email__ = "f.mendes@wustl.edu"


class TestGeoSSETrees(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        total_n_states = 3

        # calling state 0 "1" to match R unit test
        rates_t0_s1 = [
            sseobj.DiscreteStateDependentRate(
                name="sA",
                val=1.25,
                event=sseobj.MacroevolEvent.W_SPECIATION,
                states=[1,1,1]),  
            sseobj.DiscreteStateDependentRate(
                name="xA",
                val=1.0,
                event=sseobj.MacroevolEvent.EXTINCTION,
                states=[1]),
            sseobj.DiscreteStateDependentRate(
                name="dA",
                val=1.0,
                event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION,
                states=[1,0])]
        
        rates_t0_s2 = [
            sseobj.DiscreteStateDependentRate(
                name="sB",
                val=1.25,
                event=sseobj.MacroevolEvent.W_SPECIATION,
                states=[2,2,2]),
            sseobj.DiscreteStateDependentRate(
                name="xB",
                val=1.0,
                event=sseobj.MacroevolEvent.EXTINCTION,
                states=[2]),
            sseobj.DiscreteStateDependentRate(
                name="dB",
                val=1.0,
                event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION,
                states=[2,0])]
        
        rates_t0_s3 = [
            sseobj.DiscreteStateDependentRate(
                name="sAB",
                val=0.75,
                event=sseobj.MacroevolEvent.BW_SPECIATION,
                states=[0,1,2]),
            sseobj.DiscreteStateDependentRate(
                name="sAB_AB_A",
                val=1.25,
                event=sseobj.MacroevolEvent.ASYM_SPECIATION,
                states=[0,0,1]),
            sseobj.DiscreteStateDependentRate(
                name="sAB_AB_B",
                val=1.25,
                event=sseobj.MacroevolEvent.ASYM_SPECIATION,
                states=[0,0,2]),
            sseobj.DiscreteStateDependentRate(
                name="dAB_B",
                val=1.0,
                event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION,
                states=[0,2]),
            sseobj.DiscreteStateDependentRate(
                name="dAB_A",
                val=1.0,
                event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION,
                states=[0,1])]
        
        rates_t0 = rates_t0_s1 + rates_t0_s2 + rates_t0_s3

        matrix_atomic_rate_params = [rates_t0]

        state_dep_par_manager = \
            sseobj.DiscreteStateDependentParameterManager(
                matrix_atomic_rate_params,
                total_n_states)
        
        event_handler = sseobj.MacroevolEventHandler(state_dep_par_manager)

        cls.sse_stash = sseobj.SSEStash(event_handler)


    def test_tree_size_state_count_max_t_geosse(self):
        """
        Test if GeoSSE trees simulated with PJ have similar root ages
        and number of tips for the three states (A, B, AB) as GeoSSE
        trees simulated with diversitree, stopping at a maximum age.
        """

        stop_condition = "age"
        stop_condition_value = [4.0] # 4.0 time units
        
        start_at_origin = True

        # simulation initialization
        n_batches = i = 100
        n_sim = 20
        start_states_list = [1 for i in range(n_sim)]
    
        # NOTE: condition_on_speciation=False to match diversitree's
        # include.extinct=TRUE!

        # simulations
        print(("\n\nRunning TestGeoSSETrees.test_tree_size_state_count_max_"
               "t_geosse"))
        sim_batches = list()
        for i in range(n_batches):
            sse_sim = distsse.DnSSE(
                self.sse_stash,
                n=n_sim,
                origin=start_at_origin,
                start_states_list=start_states_list,
                stop=stop_condition,
                stop_value=stop_condition_value,
                condition_on_speciation=False,
                condition_on_survival=True,
                epsilon=1e-12,
                runtime_limit=3600,
                debug=False)

            trs = sse_sim.generate()

            sim_batches.append(trs)

            # printing progress
            pjh.print_progress(i , n_batches)

        # "expectations" from diversitree
        n1_ci_width_maxt_divtree = [
            7.61469739677451, 11.3985221565576, 8.65236794353448, 10.2719102405688, 8.82729473870905, 7.70410967867216, 9.19737917311999, 7.65009915182328, 11.3995816970925, 9.63261816961599,
            9.97532174919687, 8.81487721488708, 10.6127667839497, 9.25557381626244, 8.55505148722618, 8.52496771180236, 8.57001653169557, 7.77857270862941,  9.0760256388115, 7.15316029941249,
            10.3731219966787, 8.75694882511349, 10.0212869145957, 9.15229272426899, 8.17145835184636,  7.1925008330015, 7.35829067766215, 10.0924093088105, 9.51714075482078, 12.1101580591075,
            7.72996876693417, 8.53009515027396, 7.75820360338108, 6.86971562506724, 7.52897407055912, 8.73244885412443, 7.43357805722986, 10.7427498156485, 8.47732093863183, 9.87844242415133,
            8.34919938338008, 9.07318523059498,  7.0852982026022, 10.9373987128401, 7.04542104824621, 9.69906705591582, 9.27533777513403, 8.28162138724152,   8.183374671154, 7.42275229457825,
            10.0578122764487, 10.6860425637531, 8.18308944607257, 8.78593095039168, 9.89143979420712, 9.51446425623809, 9.64454069681523, 8.91552490905838, 9.69933610607375, 7.98525740548914,
            6.03309895730932, 8.95067512054456, 10.3671044425543, 6.99102857177062, 7.26507093961069, 9.58798159102837, 8.94412574097117, 7.79294226345969,  9.1445577265686, 8.47966721512065,
            7.44395047275357, 7.44453454732145, 7.90833780121852, 7.87533376675413, 9.38851097549391, 9.82664274952889, 11.2284870606467, 8.21700091461033, 9.12816349670766, 7.14562163322776,
            8.12917764315305, 7.34292766273794, 10.0978452654239, 10.5197246371766, 10.3216140621748, 8.85310148099112, 7.88410364521452, 10.7200694286912,  9.7131886061471, 10.0851927842233,
            9.39527345867231, 8.70678031537502, 6.91329700174551, 8.88098493864301, 7.79608660710324, 8.35036678795209, 8.69793695274571,  10.236955535034, 8.64278402433574, 7.64048733587701
        ]

        n1_mean_maxt_divtree = [
            41.85, 61.05,  52.1, 56.09, 48.05, 43.57, 55.08, 48.31,  54.7, 54.23,
            48.65, 49.41, 54.81, 55.18, 47.38, 45.69,  45.2, 46.38, 51.56, 48.11,
            52.51, 41.49, 53.84, 48.87, 47.65, 43.09,  45.5,  51.8, 47.47, 55.96,
            43.36, 48.65,  49.2, 45.82, 49.87, 44.45, 38.97, 56.53, 51.27,  47.0,
             50.0, 54.39, 45.73, 56.83, 45.38, 57.67, 47.71, 48.23, 49.01, 44.66,
            53.84, 52.92, 45.48, 50.74, 52.09, 55.06,  56.2,  45.5, 48.38, 45.02,
            44.76, 47.69, 51.92, 44.14,  49.0, 52.95, 48.92, 45.09, 53.79, 48.24,
            44.29,  45.3, 52.84, 42.49, 51.98, 54.62, 49.04, 49.09, 50.21,  46.4,
            50.44, 44.52, 53.46, 51.42,  47.4, 51.79, 46.78, 61.34, 51.12, 54.95,
            52.13, 49.22, 42.55, 48.53, 53.57, 46.24, 52.93, 55.95, 49.04, 50.56
        ]

        n2_ci_width_maxt_divtree = [
            7.86543478223139, 10.7037057757271, 7.75001553609391, 10.0482772865137, 9.67590376274271, 8.43811369212409, 9.31955418745603,  7.6927483597781, 11.3025300254484, 9.29364062306624,
            9.41544995853178, 9.40119590234899, 9.67069448241031, 10.1166521116964, 8.53786688842386, 8.65730339110607, 9.34167726907732, 7.89741647657286, 8.99083241377156, 7.59152376490592,
            9.61747014963872, 8.47350367670847, 10.5828067378225, 8.93082443864727, 7.85468723257751, 7.95373211466914, 6.91299642135132, 10.3637539188513,  9.2578425219711,  12.204334549808,
             7.6979242748558, 8.64153039195903, 7.85319686777559, 7.10611412929639, 6.97785358749271, 9.08683607427844, 7.20986951887424, 11.1676130178098, 9.18034973775372, 8.55192461258832,
            8.43517003441513, 9.01724890779059, 7.25113713130359, 10.4206445102833, 8.04153935220933, 9.69270369436034, 9.84071431060928, 8.01884533102044, 7.59853222392192, 6.93145464745294,
            9.22874986992367, 9.24938360870659, 8.21480021336213, 8.82923070732849, 9.66104271930532, 9.11204638994585, 9.06621674498634, 8.76253061551735, 9.65159600003434, 7.86942866140673,
            5.64418781051836, 8.31118137645445, 9.45872980568584, 6.62377136237432, 6.64063089068069, 9.07603333460764, 8.55654817176632, 7.69166074555076, 8.54410934547743, 7.96227309668933,
            7.71305713866055,  7.1179538881577, 8.49921951744138, 8.07576773036146, 9.75057423465175, 9.28206252062373, 10.3589300703316, 8.43785432355019, 9.54283878869756, 7.11980500141554,
            8.61420591236395, 8.43310702209219, 9.85239801777243, 9.94580761226568, 10.2791140262793, 8.10130363630921, 7.83586583423435, 10.2240823881855, 9.43259488841161, 9.31054369916931,
              9.189959754498, 8.57058046108897, 7.03984064328364, 7.98626397922449,  7.7500613496692, 8.66730710724577, 8.80831563201111, 9.21878862692267, 8.41758235642947, 7.45113159044865
        ]

        n2_mean_maxt_divtree = [
            40.84,  59.7, 47.82, 56.31, 46.62, 43.71, 53.84, 44.73, 53.64, 53.34,
            46.31, 50.41, 55.04, 53.88, 48.71, 43.78, 46.08, 46.71, 49.67, 46.44,
            48.24, 40.52, 52.47, 45.44, 46.14, 44.64, 41.14, 50.42,  44.5, 54.97,
             42.3,  47.0, 49.27, 46.01, 47.32, 41.56, 37.46, 55.34, 53.54, 43.23,
            48.71, 51.14, 44.35, 55.62, 44.93, 55.33, 48.18, 45.74, 44.99, 44.29,
             52.1, 47.62,  45.1, 48.54,  51.7, 51.99, 51.86,  44.7, 45.54, 44.19,
            41.85, 45.23, 50.07, 42.66, 44.85,  52.3, 47.62, 43.21, 51.31, 46.08,
             42.8, 41.99, 53.32, 41.59, 52.61, 51.59, 47.85, 48.63, 49.78, 44.47,
            48.53, 44.53, 51.73, 50.62, 45.77, 50.18, 46.01, 58.02, 49.28, 52.46,
            49.61, 48.47,  40.7, 45.19, 50.71, 46.89, 51.09, 50.84, 46.75, 46.76
        ]

        n3_ci_width_maxt_divtree = [
            0.555825735353094, 0.535903520639997, 0.537378626559364, 0.431015479344238,  0.45180169780714, 0.476220887548387, 0.419726510282998, 0.479206042018536, 0.422725071961253, 0.464840207583056,
            0.607552099773669, 0.611752962618676, 0.531369663789682, 0.473077481001054, 0.577828248922225, 0.531541248245006, 0.501738190813907, 0.577962543262227, 0.400514697141394, 0.458853836017836,
            0.648190363608367, 0.443440497414788, 0.444209889420064, 0.499785442449906, 0.455117663107825, 0.524811583698224,  0.51131800538047, 0.499804852422473, 0.472486534039315, 0.591208418359713,
            0.559097333099334, 0.492074396937305, 0.466402798127338, 0.557926636500868, 0.607079281594599, 0.553429463719751, 0.459601647455092, 0.462815625309154,  0.52196460424133, 0.505989306390776,
            0.442393555764342, 0.457180580550315, 0.521343476612167, 0.573690115908326, 0.479206042018536, 0.525077696607605, 0.420188509883819, 0.602263038610845, 0.533755921974102, 0.540751076622772,
            0.487618454917118, 0.564536503906013, 0.466469352225477, 0.459191980713421, 0.489270891895855, 0.461657136319966, 0.397792654989552, 0.500673647209538, 0.493255849771022, 0.503035811725952,
            0.535994023786976, 0.624108225528007, 0.463230464272702, 0.411675413966691, 0.430785843347112, 0.521551841366056, 0.546958526671803, 0.663736507291192, 0.626828677961651, 0.545235393146294,
            0.617080164070187, 0.444908182106208, 0.596192091612267, 0.522113267636845, 0.536746418316655, 0.434315922812048, 0.609360109483959, 0.493535046395088, 0.670391315244728,  0.47283544620927,
            0.443685448683792, 0.489702940257632, 0.565031187125315, 0.565954124564095, 0.405138507803258, 0.446166703455925, 0.528113662391005, 0.440807477617193,  0.53157044859377, 0.502391282173607,
            0.510934615991305, 0.582693292505854, 0.836210982994608, 0.577935686890694, 0.495606391558397, 0.486666560398494, 0.585748619160545, 0.392672554362404, 0.543324707126169,   0.5411205119794
        ]

        n3_mean_maxt_divtree = [
            11.12, 15.51, 13.75, 14.93, 12.76, 11.57,  16.1,  11.6, 14.46, 14.37,
            12.83, 13.68, 14.49, 14.43, 13.18,  12.8,  12.3, 13.29, 13.01, 12.42,
            13.35,  10.9,  14.5, 12.24, 12.42,  11.3, 11.77, 13.19, 11.88, 14.62,
             11.1, 12.43, 12.96, 11.95, 12.68, 11.46, 10.25, 15.62, 13.46, 12.01,
            13.59, 13.82, 11.96, 14.91,  12.2, 14.76, 12.72, 12.48, 11.63, 11.14,
            14.36, 13.87, 11.93, 13.04, 14.41, 13.94,  14.8, 11.87, 12.23, 12.54,
            11.98, 12.74, 13.32, 11.58, 12.97, 13.72,  12.7, 11.71, 14.07, 13.06,
            11.37, 11.35,  14.2, 11.25, 13.25, 14.22,  12.8, 13.08, 14.08, 12.51,
            13.58, 12.66, 14.23, 14.13, 12.95, 13.61, 12.11, 15.11, 13.16, 13.77,
             13.0, 13.26, 10.63, 12.77, 13.61,  11.7,  13.9, 13.87, 12.57, 13.29
        ]

        root_ages_ci_width_maxt_divtree = [
            0.0863621436610369, 0.0683344476938087, 0.0764824383260808, 0.0782119002487626, 0.0953901974093536, 0.0828971839834432, 0.0779879908824513, 0.0993078674559366, 0.0964958695619792, 0.0879013012005711,
             0.100410281284171, 0.0602099333156964, 0.0627084069830292, 0.0785843068183554, 0.0942952792553635, 0.0869292276344587, 0.0982118725073612, 0.0682497208139858, 0.0678699587739283, 0.0843821450863513,
             0.077526933961665,  0.061975429232225, 0.0821942621664972, 0.0971370045704151, 0.0689002363196737, 0.0650862067994434, 0.0710002446906274,  0.110022693716635, 0.0694915820374534, 0.0824715109678761,
            0.0810296381623433, 0.0837232755213046, 0.0723647316366736, 0.0863664240763528, 0.0699901475457904,  0.105287588080782, 0.0992796186000226, 0.0814778947653661, 0.0741412029585709, 0.0918229670804907,
            0.0814542643144918, 0.0836989354406395, 0.0885605828327472, 0.0802974535163125, 0.0736579950207639, 0.0835150416704483, 0.0859738537095798, 0.0646280878667954, 0.0956631951634727, 0.0656745072776782,
            0.0721009457132847, 0.0851020965959267,  0.116276753024932, 0.0754299235710839,  0.078579106169794, 0.0809213516248445, 0.0833969439461317, 0.0786993782768009,  0.081016820640823, 0.0849973399851797,
            0.0869738134809529, 0.0848249919742559, 0.0618016950730631, 0.0851971655532165, 0.0754477438432816, 0.0629650954964614,  0.084267636293506, 0.0822303530341302, 0.0786002952327918, 0.0786810829708018,
            0.0780211398402472, 0.0795046173750614, 0.0809231134676522, 0.0694291278413427, 0.0862414262233601,  0.074479722758591, 0.0949697676361586, 0.0652331364130727, 0.0876214151851634, 0.0767873923262017,
            0.0811177805127541,  0.061941982651136, 0.0759781687997605, 0.0851475507141673, 0.0828628602570979, 0.0883212418535365, 0.0705176195001626, 0.0606045718160437, 0.0618065154283371, 0.0596878566675811,
            0.0710418631483221, 0.0873721022509251, 0.0879411359850104, 0.0846850291250342, 0.0787465611609875, 0.0795017393876372, 0.0863436018914586, 0.0804853967955438,  0.076684316999975,  0.067626116341724
        ]

        root_ages_mean_maxt_divtree = [
            3.50277554651025, 3.59861897156149, 3.55816380865796, 3.52959903544372, 3.51136655797538, 3.47423369407496, 3.52999625188782, 3.55495963518541, 3.54947430506743, 3.54582114303298,
            3.49687058713685, 3.64592548954201, 3.62351543644644,  3.5741000772744, 3.48021231352758, 3.54587651094397, 3.50369749483071, 3.57583364060204, 3.62958195248726,  3.5387255728763,
            3.53907263016699,  3.5844916129234, 3.51741852548453, 3.50284518908845, 3.58097277731293, 3.59273196624833, 3.57231299558864, 3.49064833503716,  3.5701524209432, 3.50677622091431,
            3.57708908296371, 3.50381117773857, 3.52894600681898,  3.5873270084788, 3.63429872627754, 3.49368119662322, 3.43607406780903, 3.56375148175194, 3.58025237571096, 3.53065908927687,
            3.59176041885477, 3.58390297784463, 3.51538118479266, 3.55934214586894, 3.63296561318448, 3.55327029199147, 3.54130857912747, 3.57809544981563, 3.52429848949143, 3.56480820074316,
            3.56102577967363, 3.51463200814148, 3.48802339469853,  3.5664830497503, 3.54188648014971, 3.54999977432845, 3.53534355838466, 3.56482634976622, 3.55717290844079, 3.56977340393873,
            3.51868619417851, 3.50237316170494, 3.62943438217033, 3.51958316584184, 3.53822377005109, 3.61140242193596, 3.53375679542984, 3.55369676402664, 3.62394340710736, 3.52869683509773,
            3.55905119814178, 3.59428125478635,  3.5388665381499, 3.53918703396336, 3.55345431040883, 3.56585687239169, 3.51704499377328, 3.58815572523115, 3.51476736659786, 3.54001980130828,
            3.58141071029781,  3.5850687855442, 3.56391570702091, 3.52464147005821,  3.5149348452404, 3.54210361161907,  3.5672857719015, 3.61493644562914, 3.64691740182515, 3.64988404345597,
            3.58205575470221, 3.47931868027422, 3.49456699746901, 3.50365276356308, 3.59532019717527, 3.54200778846066, 3.61111175136063, 3.59293906165868, 3.57808474027827, 3.60271391529931
        ]
     
        # parsing simulations
        n1_ci_overlap_count = 0
        n2_ci_overlap_count = 0
        n3_ci_overlap_count = 0
        root_age_ci_overlap_count = 0
        global_mean_n1 = 0.0
        global_mean_n2 = 0.0
        global_mean_n3 = 0.0
        global_mean_root_age = 0.0
        for i, batch in enumerate(sim_batches):
            # note that we're matching diversitree's state coding:
            # 0=AB, 1=A, 2=B
            n3s = [ann_tr.state_count_dict[0] for ann_tr in batch]
            n1s = [ann_tr.state_count_dict[1] for ann_tr in batch]
            n2s = [ann_tr.state_count_dict[2] for ann_tr in batch]
            root_ages = [ann_tr.root_age for ann_tr in batch]
            
            mean_n1 = statistics.mean(n1s)
            mean_n2 = statistics.mean(n2s)
            mean_n3 = statistics.mean(n3s)
            mean_root_ages = statistics.mean(root_ages)

            global_mean_n1 += mean_n1
            global_mean_n2 += mean_n2
            global_mean_n3 += mean_n3
            global_mean_root_age += mean_root_ages
            
            stdevs_n1 = statistics.stdev(n1s)
            stdevs_n2 = statistics.stdev(n2s)
            stdevs_n3 = statistics.stdev(n3s)
            stdevs_root_ages = statistics.stdev(root_ages)
            
            sterr_n1 = stdevs_n1 / math.sqrt(n_sim)
            sterr_n2 = stdevs_n2 / math.sqrt(n_sim)
            sterr_n3 = stdevs_n3 / math.sqrt(n_sim)
            sterr_root_ages = stdevs_root_ages / math.sqrt(n_sim)
            
            n1_ci_width_maxt = 1.96 * sterr_n1
            n2_ci_width_maxt = 1.96 * sterr_n2
            n3_ci_width_maxt = 1.96 * sterr_n3
            root_ages_ci_width_maxtaxa = 1.96 * sterr_root_ages

            if abs(mean_n1 - n1_mean_maxt_divtree[i]) \
                    <= (n1_ci_width_maxt + n1_ci_width_maxt_divtree[i]):
                n1_ci_overlap_count += 1

            if abs(mean_n2 - n2_mean_maxt_divtree[i]) \
                    <= (n2_ci_width_maxt + n2_ci_width_maxt_divtree[i]):
                n2_ci_overlap_count += 1

            if abs(mean_n3 - n3_mean_maxt_divtree[i]) \
                    <= (n3_ci_width_maxt + n3_ci_width_maxt_divtree[i]):
                n3_ci_overlap_count += 1

            if abs(mean_root_ages - root_ages_mean_maxt_divtree[i]) \
                    <= (root_ages_ci_width_maxtaxa 
                        + root_ages_ci_width_maxt_divtree[i]):
                root_age_ci_overlap_count += 1
    
        print("\n\nPJ global mean taxon count at state 1 = " \
              + str(global_mean_n1 / 100.0))
        print("diversitree global mean taxon count at state 1 = " \
              + str(statistics.mean(n1_mean_maxt_divtree)))
        print("\nPJ global mean taxon count at state 2 = " \
              + str(global_mean_n2 / 100.0))
        print("diversitree global mean taxon count at state 2 = " \
              + str(statistics.mean(n2_mean_maxt_divtree)))
        print("\nPJ global mean taxon count at state 3 = " \
              + str(global_mean_n3 / 100.0))
        print("diversitree global mean taxon count at state 3 = " \
              + str(statistics.mean(n3_mean_maxt_divtree)))
        print("\nPJ global mean root age = " \
              + str(global_mean_root_age / 100.0))
        print("diversitree global mean root age = " \
              + str(statistics.mean(root_ages_mean_maxt_divtree)))
        
        # [==== * ====][.... + ....] if we take '+' to be the "truth" of the '*' interval, + cannot be more than '====' away from '*' 95% of the time
        # then abs('+' - '*') can be at most ('====' + '....'). '....' can be added because we still are guaranteed to see '+' falling within that range
        # 95% of the time

        print("\n95% CIs of simulations here and from diversitree " \
              + "overlapped " + str(n1_ci_overlap_count) \
              + " times for state 1 count.")
        print("\n95% CIs of simulations here and from diversitree " \
              + "overlapped " + str(n2_ci_overlap_count) \
              + " times for state 2 count.")
        print("\n95% CIs of simulations here and from diversitree " \
              "overlapped " + str(n3_ci_overlap_count) \
              + " times for state 3 count.")
        print("\n95% CIs of simulations here and from diversitree " \
              "overlapped " + str(root_age_ci_overlap_count) \
              + " times for root age.")
        exp_count = int(0.95 * n_batches)
        a_delta = math.ceil(0.08 * exp_count)
        self.assertAlmostEqual(
            n3_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                + "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)
        self.assertAlmostEqual(
            n2_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)
        self.assertAlmostEqual(
            n1_ci_overlap_count, 
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)
        self.assertAlmostEqual(
            root_age_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)
    

    def test_tree_size_state_count_max_t_geosse_reconstructed(self):
        """
        Test if GeoSSE reconstructed trees simulated with PJ have similar root
        ages and number of tips for the three states (A, B, AB) as GeoSSE
        trees simulated with diversitree, stopping at a maximum age.
        """

        stop_condition = "age"
        stop_condition_value = [ 4.0 ] # 4.0 time units
        
        start_at_origin = True

        # simulation initialization
        n_batches = i = 100
        n_sim = 20
        start_states_list = [1 for i in range(n_sim)]
        # seeds_list = [i+1 for i in range(n_sim)]

        # NOTE: condition_on_speciation=True to match diversitree's
        # include.extinct=False!
    
        # simulations
        print(("\n\nRunning TestGeoSSETrees.test_tree_size_state_count_max_t_"
               "geosse_reconstructed"))
        sim_batches = list()
        for i in range(n_batches):
            # print("Doing batch " + str(n_batches - i))
            sse_sim = distsse.DnSSE(
                self.sse_stash,
                n=n_sim,
                origin=start_at_origin,
                start_states_list=start_states_list,
                stop=stop_condition,
                stop_value=stop_condition_value,
                condition_on_speciation=True,
                condition_on_survival=True,
                epsilon=1e-12,
                runtime_limit=3600,
                debug=False)

            trs = sse_sim.generate()

            sim_batches.append(trs)

            # printing progress
            pjh.print_progress(i , n_batches)

        # "expectations" from diversitree
        n1_ci_width_maxt_divtree = [
             4.0917922468663, 5.73286302003324, 4.70218648543828,  5.0375208403108, 4.61971180613219, 4.04887439332579, 4.80342847440106, 3.98479583061882, 6.06807276292577, 4.74263670584585,
            4.98070507361187, 4.73583753662785, 5.62794655786476, 4.26779080853954, 4.53523506831217, 4.24904358655028, 4.29167672518974,  5.1443608626585, 3.43464880924212, 4.51756862397498,
             5.1347099388339, 4.16109552222134, 5.65599503650147,  4.4213819091165, 4.71601029051062, 3.01913269344129, 4.54708180793801, 4.63361291922972, 5.11510540586715, 5.27996233595382,
            4.55525669923876, 4.09384393696218, 3.98393051316628,  3.9828784391455, 3.77088861032982, 4.10026304728973, 4.93984535626758, 5.25925364893522, 5.17082613034929, 4.02692380796452,
             4.1070793566743, 4.69041712361868, 4.48459094692171, 5.41223442660098, 4.64409719680083, 5.16584229591483, 4.17355430744248, 4.34615617210464, 4.05168389964299, 5.07877864010153,
            5.18851680081343, 4.77704627475087, 4.49853825668613, 4.86201447030909, 4.92069468282845, 5.02533188210018, 4.52677715204122, 4.61962318879632, 4.11321036779022, 3.59516867729204,
            4.07068230768516, 5.81080511203921,  3.5091282467475, 4.03591153280223, 4.76591451560988, 4.61553065975204, 4.05572923129439, 4.54079656234521, 4.29396908731634, 3.97096721169587,
            3.88110195743946, 4.09887731384332, 4.21688169263698,  4.8976993305969, 4.96695038262255, 5.74176372213348, 4.38816641416251, 5.01814132180996, 3.79046779256395, 4.28694349923772,
            4.51770090164983, 5.53934626431311, 4.54520440362225, 5.24663536951121, 4.49650423571669, 4.41169965899903, 5.82419359138233,  4.3954469098113, 5.57916586372457,  4.3291971487946,
            4.80247512800967, 3.62268098166945, 4.52454656756013, 4.14127090725453, 4.64927475886663, 4.24844811119724, 5.34960473570551, 4.17717879778767, 4.78060648601633, 4.65357943449248
        ]

        n1_mean_maxt_divtree = [
            20.48, 29.44, 26.14, 25.46, 22.95, 21.71, 28.33, 22.02, 28.47, 24.71,
             22.6, 25.43, 27.52, 24.57, 24.27, 22.64, 21.19, 25.24, 23.99, 24.38,
            24.21, 20.47, 26.29, 23.89, 23.62, 19.24, 23.99, 23.24, 23.65, 22.64,
            25.15, 21.24, 23.09, 25.79, 20.44, 19.89, 25.19, 26.79, 23.32, 22.68,
            26.02, 25.22, 23.57, 25.73, 24.53,  26.5, 21.43, 23.67, 23.74, 24.66,
            24.86, 25.05, 23.69, 25.31, 25.45, 27.25, 23.41, 21.56, 21.96,  22.3,
            22.53, 26.37, 21.32, 23.57, 24.99, 23.26, 22.32, 25.11, 22.83, 21.66,
             21.0, 26.93, 21.08, 25.03, 25.81, 22.96, 24.23, 26.44, 22.28, 23.35,
            22.56, 26.78,  22.7, 24.48, 25.24, 24.69, 29.05, 23.43, 29.33, 22.52,
            24.43, 21.65, 25.28, 25.55, 24.53,  24.0, 29.85, 24.07, 25.34, 26.83
        ]

        n2_ci_width_maxt_divtree = [
            4.13332870752429, 5.66947806351936, 4.02118572894447, 5.11017201869037, 5.20541201800316, 4.57345042274352, 4.94665789364574, 4.07786971202892, 5.89694213091442, 4.97784656114093,
            4.66364150795786, 4.88755105478514,  5.5514739917622, 4.58345092962087, 4.73014153690901, 4.56335444650582, 4.77107049309702, 5.15939477211673, 3.34878600044369, 4.67536913182134,
            4.81991607286838, 4.56692277981221, 5.48350507841932, 4.20442347125698, 4.67548491084242, 3.46797387451858, 4.38531808154935, 4.47833453891335, 5.45569786479413, 5.54511131806179,
            4.31055990644727, 4.12229989254062, 4.28403511307984, 3.76697364455711, 3.51891422648142, 4.37345593989259, 5.13674129078785, 5.16146828362127, 4.98214617662434, 4.01564528193204,
            4.22317121805045, 4.69765376624063, 4.63088036223059, 5.20278623350173, 4.80036295328096,  5.2566857631136, 3.80784921418637, 4.35033263718321, 3.71900338903809,  4.8094027787746,
            4.51934803557622, 4.69243696674433, 4.77794987521855, 4.94038930686989, 4.80326084457321, 4.63779826271654, 4.81477653827624, 5.17346813616935, 4.35884493568346, 3.24940811866041,
            3.98690988190913, 4.92778686981726, 3.14410422527529, 3.65222098881093,  4.6549467535498, 4.56794397602256, 4.17422600502298, 4.53655252028376, 4.47116254224692, 3.97660747671157,
            3.61506787731237, 4.67788450140497, 4.32103416334656, 5.11227536224272, 4.93844691228473, 5.27363630880778, 4.15660429862569, 4.81733269322057, 3.48489104587448, 4.61643477374066,
            5.03223380549148,  5.3319889493471, 4.21917928368525, 5.32600158763731, 4.38383480094999, 4.35787625043913, 5.61180143654712, 4.22295988035775, 5.33417178015501, 4.27379114627987,
            4.85236576835454, 3.72516633516498, 4.37756558406933, 4.52861335461039, 4.74202792931719, 3.88253893292219, 5.02753362493967, 4.17914028663235, 4.62993171597006, 4.44271732591438
        ]

        n2_mean_maxt_divtree = [
            21.31, 29.33, 23.75, 26.65, 23.79, 22.18, 28.48, 20.04, 28.09, 25.56,
            22.23,  27.5, 29.89, 24.75, 25.38, 22.64, 22.27, 25.84,  23.8, 23.98,
             22.5,  21.5, 23.53, 23.01, 23.25, 19.61, 23.37,  22.6,  23.7, 23.96,
             25.8, 21.55, 25.07, 23.79,  19.5, 19.62, 25.42, 27.29,  23.9,  22.4,
            25.72, 26.24,  23.7, 25.28, 24.24,  27.7, 20.93, 23.77, 21.78, 25.17,
             22.9,  25.4,  23.7, 25.26, 24.02, 26.76, 24.31, 22.41, 21.82, 21.41,
            21.81, 26.25, 20.78, 22.12, 25.47, 23.36, 22.48, 25.07, 23.21, 20.98,
            20.75, 27.29, 21.51, 25.72, 26.89, 23.49, 24.44, 25.46, 21.47, 23.75,
            23.06, 25.96, 22.37, 25.19, 24.89,  25.5, 27.87, 23.62, 29.04, 21.79,
            25.04, 20.81, 24.76, 25.64, 24.23, 23.35, 28.11, 22.95, 24.58, 26.22
        ]

        n3_ci_width_maxt_divtree = [
            2.29931736940609, 3.21414104647986, 2.45358081755683, 2.86182509146548, 2.49394076509407, 2.14732091479385, 2.92238709429276, 2.11784371949443, 3.36587508749901, 2.75859753563951,
             2.7882981902185,  2.6870729293558, 3.09144176517604, 2.43753834394083, 2.56810774530882, 2.31192738203387, 2.58980841879484,  3.0636678977126, 1.70761614497693, 2.59803246486353,
            2.75077950384757, 2.32779700284725, 3.19262087174583, 2.31968130552279,  2.4869331123805, 1.81217712693708, 2.53898663758961, 2.44522482525853, 2.84113695011221, 3.15651967274789,
            2.41928371768725, 2.12170988753616, 2.17220851316039, 2.06403331113985, 1.87391257905469, 2.32651640567149, 2.86707784817133, 3.00076621353327, 2.58654223349563, 2.30727681543206,
            2.40283949736577, 2.53338678221128, 2.53823382450845,  2.6043158817857, 2.44766747956193,  2.8430757142165, 2.18136409958299, 2.34401694033248, 2.02989195672075, 2.86050886904743,
            2.75210167624011, 2.56557406386401, 2.56206268510828, 2.71748043584345, 2.47057949150364,  2.7858923384101, 2.56912973167604, 2.40185419148867, 2.39688516085845, 2.14110365348096,
            2.35974146846213, 2.83548240464841, 1.81834960134933,  2.2340239804108, 2.52072699951038, 2.46724747658338,  2.2813999954839, 2.60446562145353, 2.60959180646392, 2.15725590601588,
            2.12478479062343, 2.35995441113303, 2.30573239583698, 2.43787023991571, 2.58464900252677, 2.80089500847226,  2.3864730227859, 2.87010794179866, 2.06445345069852, 2.46494150974514,
            2.67318812996426, 3.03020876461866, 2.45184922534775, 2.89487327933959, 2.53189446091501, 2.35293939152755, 3.05896207682847, 2.31660546367815, 3.03289677604455, 2.27571108886871,
            2.42923978497992,  1.8332438505986, 2.46273659069571, 2.21722436365558, 2.34940503313008, 2.34269220558336, 2.64800909882779, 2.30876894041002, 2.63276826311636,  2.7699505228415
        ]

        n3_mean_maxt_divtree = [
            11.57, 15.65,  14.4, 14.28, 12.79, 11.85, 16.47, 11.05, 15.77,  13.7,
            12.62, 14.74, 15.53, 13.39, 13.67, 12.58, 12.88, 14.42, 12.12, 13.57,
             12.4, 11.83, 13.84, 12.53, 12.56,  10.7, 13.46, 11.93, 12.83, 12.85,
            13.87, 11.51, 12.89, 13.46, 10.84, 10.95, 14.27, 14.63, 13.01,  12.3,
            14.52, 14.06, 12.49, 13.85, 13.13, 14.93, 11.57, 12.69, 11.44, 14.05,
            13.45, 13.71, 13.09, 14.05, 13.27,  15.1, 13.06, 11.82, 12.63, 12.86,
             12.6, 13.81, 11.65, 13.23, 13.65, 12.87,  11.9, 14.18, 13.06, 11.52,
            11.44, 14.71, 11.56, 12.98, 14.68,  12.5, 13.52, 14.93, 12.37,  13.2,
            13.16, 14.97, 12.83, 13.66, 13.72, 13.31, 15.17, 12.28, 15.47, 11.59,
            13.27, 11.53,  13.4,  13.5, 12.88, 12.69, 15.28, 13.15, 13.95, 15.25
        ]

        root_ages_ci_width_maxt_divtree = [
            0.167748975732055, 0.146561224037316, 0.152893513850819, 0.163976521765066,  0.15948814053551, 0.172962260638984,   0.1790852460351, 0.167305052668457, 0.166399533784444, 0.150788561226878,
            0.178914962847602, 0.176280222661853, 0.151298709520145, 0.178485684846179, 0.159200806665107, 0.182283386082088, 0.163546750128425,  0.17856727867628, 0.152964019955725, 0.183298304765695,
            0.198420030666576, 0.189837206865412, 0.169918026469495, 0.178002156776782, 0.179043448259084, 0.182349855681201, 0.167438229338549, 0.179064488395885, 0.165462591579172, 0.181874056497593,
            0.161722815090551, 0.165259583840425, 0.173442173850066,  0.16555107344498, 0.176924206872507, 0.178578166680919, 0.164016977795694, 0.178570120363819,  0.19394049802692, 0.156728621343641,
            0.149456255250099, 0.164546610028926, 0.173057302864322, 0.175238667737612, 0.157579965607193, 0.187455550645696, 0.187886638245493, 0.155584888008457,  0.15811217115627, 0.166307529874024,
             0.15958364408693, 0.154651569416355, 0.170814423630697, 0.175437010962338, 0.166256430244156, 0.155320912351519, 0.194086320744042,  0.19049884437413, 0.166106871753781, 0.154595031735161,
             0.15884336989442, 0.165455187410935, 0.167014030478773, 0.134929873998138, 0.167938366945844, 0.163548495946398, 0.168631307394474, 0.166086779050028, 0.143743271369206, 0.165784819735821,
            0.178696005455878, 0.172208837641956, 0.181309821333852, 0.165527202761531, 0.168246252335932, 0.178815879273848, 0.185951081367988, 0.146094591094431, 0.170350159933012, 0.161065950676852,
            0.174982702070782, 0.176166248617147, 0.175069524273744, 0.188302900745106,  0.17454015472694,  0.14371925305227, 0.185893607201471, 0.168108810846146, 0.189207141778313, 0.170868662001905,
            0.179648295788774, 0.163003802982602, 0.188165264750944, 0.169421008895505, 0.156506750359497, 0.197879609636836, 0.189822741891647, 0.185356966477554, 0.172049964235779, 0.162527032120548
        ]

        root_ages_mean_maxt_divtree = [
            2.81294683300714, 3.15709615701041, 3.02536242387205,  3.0204599282415, 2.97919281192028, 2.93922856446797, 2.99090318261462, 2.89712712224474, 3.03580046769903, 2.98243822689703,
            2.86633387426352, 2.96072226700957, 3.07687209867846, 3.02057229702951, 2.97007853660844, 2.85205943898883,  2.8758845451405, 2.91885485413328, 3.05416479024579, 2.90655701265974,
             2.7811256137968, 2.88898999198107, 2.96497474899116, 2.90237447724822, 3.04949376624334, 2.84324657086407, 2.93254624007822, 2.96171503054378, 2.87578414238343, 2.88601315257592,
            2.99041148898866, 2.92193478383975,  2.8791367697807, 3.04187425205889, 2.91364669389812,  2.8098433722629, 2.99061403810957,  2.9694883828027, 2.81804128510157,  2.9173707704357,
            3.09751750759215, 2.96869334051237, 2.91095089953654, 3.03676183351828, 3.06800209831189, 3.01908885706231, 2.86451965874331, 3.00010114946109, 3.06469013960294, 2.98333399290818,
            2.97845999151225,  3.0136138777134, 2.96597182962586, 2.89181820157277, 2.96456828479929, 2.96262788908779,  2.9144163875684, 2.95771195148222, 3.01623783960618, 3.09505354285076,
            2.95619032840593, 2.97525816350629,  2.9807112828402, 3.01895480362496, 3.02530256364188, 3.05904786107272, 2.88475550633546, 3.12318556919945, 3.07849334135732, 2.90701401240679,
            2.95717201447504, 2.96501136531156, 2.83310214635984, 2.95456986579809, 2.95833365748706, 2.83405227988452, 2.95162186259068, 3.07696955739365,  2.9792404606556, 3.06134657320032,
            2.89379147160122, 2.94548244024577, 2.84456866058561, 2.83339543088219, 2.99136047532738, 3.10106645304776, 2.96260555987586, 3.03379059965464, 3.00519302203544, 2.89535284383483,
            2.85251037177491, 2.92438553379087, 2.95916051037804, 2.99265845822256, 3.04280402090326,   2.874858873879, 3.03994870073686, 2.91665451902818, 3.02116233420309, 3.05132582846316
        ]
        
        # parsing simulations
        n1_ci_overlap_count = 0
        n2_ci_overlap_count = 0
        n3_ci_overlap_count = 0
        root_age_ci_overlap_count = 0
        global_mean_n1 = 0.0
        global_mean_n2 = 0.0
        global_mean_n3 = 0.0
        global_mean_root_age = 0.0
        for i, batch in enumerate(sim_batches):            
            rec_trs = [ann_tr.extract_reconstructed_tree() for ann_tr in batch]

            # note that we're matching diversitree's state coding:
            # 0=AB, 1=A, 2=B
            n3s = [ann_tr.alive_state_count_dict[0] for ann_tr in batch]
            n1s = [ann_tr.alive_state_count_dict[1] for ann_tr in batch]
            n2s = [ann_tr.alive_state_count_dict[2] for ann_tr in batch]
            rec_root_ages = list()
            for rec_tr in rec_trs:
                rec_root_ages.append(rec_tr.max_distance_from_root())
            
            mean_n1 = statistics.mean(n1s)
            mean_n2 = statistics.mean(n2s)
            mean_n3 = statistics.mean(n3s)
            mean_rec_root_ages = statistics.mean(rec_root_ages)

            global_mean_n1 += mean_n1
            global_mean_n2 += mean_n2
            global_mean_n3 += mean_n3
            
            stdevs_n1 = statistics.stdev(n1s)
            stdevs_n2 = statistics.stdev(n2s)
            stdevs_n3 = statistics.stdev(n3s)
            stdevs_rec_root_ages = statistics.stdev(rec_root_ages)
            
            sterr_n1 = stdevs_n1 / math.sqrt(n_sim)
            sterr_n2 = stdevs_n2 / math.sqrt(n_sim)
            sterr_n3 = stdevs_n3 / math.sqrt(n_sim)
            sterr_rec_root_ages = stdevs_rec_root_ages / math.sqrt(n_sim)
            
            n1_ci_width_maxt = 1.96 * sterr_n1
            n2_ci_width_maxt = 1.96 * sterr_n2
            n3_ci_width_maxt = 1.96 * sterr_n3
            root_rec_ages_ci_width_maxt = 1.96 * sterr_rec_root_ages

            if abs(mean_n1 - n1_mean_maxt_divtree[i]) \
                    <= (n1_ci_width_maxt + n1_ci_width_maxt_divtree[i]):
                n1_ci_overlap_count += 1

            if abs(mean_n2 - n2_mean_maxt_divtree[i]) \
                    <= (n2_ci_width_maxt + n2_ci_width_maxt_divtree[i]):
                n2_ci_overlap_count += 1

            if abs(mean_n3 - n3_mean_maxt_divtree[i]) \
                    <= (n3_ci_width_maxt + n3_ci_width_maxt_divtree[i]):
                n3_ci_overlap_count += 1

            if abs(mean_rec_root_ages - root_ages_mean_maxt_divtree[i]) \
                    <= (root_rec_ages_ci_width_maxt \
                        + root_ages_ci_width_maxt_divtree[i]):
                root_age_ci_overlap_count += 1
    
        print("\n\nPJ global mean taxon count at state 1 = " \
              + str(global_mean_n1 / 100.0))
        print("diversitree global mean taxon count at state 1 = " \
              + str(statistics.mean(n1_mean_maxt_divtree)))
        print("\nPJ global mean taxon count at state 2 = " \
              + str(global_mean_n2 / 100.0))
        print("diversitree global mean taxon count at state 2 = " \
              + str(statistics.mean(n2_mean_maxt_divtree)))
        print("\nPJ global mean taxon count at state 3 = " \
              + str(global_mean_n3 / 100.0))
        print("diversitree global mean taxon count at state 3 = " \
              + str(statistics.mean(n3_mean_maxt_divtree)))
        print("\nPJ global mean root age = " \
              + str(global_mean_root_age / 100.0))
        print("diversitree global mean root age = " \
              + str(statistics.mean(root_ages_mean_maxt_divtree)))
        
        # [==== * ====][.... + ....] if we take '+' to be the "truth" of the '*' interval, + cannot be more than '====' away from '*' 95% of the time
        # then abs('+' - '*') can be at most ('====' + '....'). '....' can be added because we still are guaranteed to see '+' falling within that range
        # 95% of the time

        print("\n95% CIs of simulations here and from diversitree " \
              + "overlapped " + str(n1_ci_overlap_count) \
              + " times for state 1 count.")
        print("\n95% CIs of simulations here and from diversitree " \
              + "overlapped " + str(n2_ci_overlap_count) \
              + " times for state 2 count.")
        print("\n95% CIs of simulations here and from diversitree " \
              + "overlapped " + str(n3_ci_overlap_count) \
              + " times for state 3 count.")
        print("\n95% CIs of simulations here and from diversitree " \
              + "overlapped " + str(root_age_ci_overlap_count) \
              + " times for root age.")
        exp_count = int(0.95 * n_batches)
        a_delta = math.ceil(0.07 * exp_count)
        self.assertAlmostEqual(
            n3_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                + "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)
        self.assertAlmostEqual(
            n2_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                + "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)
        self.assertAlmostEqual(
            n1_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                + "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)
        self.assertAlmostEqual(
            root_age_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                + "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)


    def test_tree_size_state_count_max_t_geosse_reconstructed_rejection(self):
        """
        Test if GeoSSE reconstructed trees simulated with PJ have similar root
        ages and number of tips for the three states (A, B, AB) as GeoSSE
        trees simulated with diversitree. We reject trees < 50 and > 200.
        """

        stop_condition = "age"
        stop_condition_value = [ 4.0 ] # 4.0 time units
        
        start_at_origin = True

        # simulation initialization
        n_batches = i = 100
        n_sim = 20
        start_states_list = [1 for i in range(n_sim)]
        # seeds_list = [i+1 for i in range(n_sim)]
    
        # NOTE: condition_on_speciation=True to match diversitree's
        # include.extinct=FALSE!

        # simulations
        print(("\n\nRunning TestGeoSSETrees.test_tree_size_state_count_max_t_"
               "geosse_reconstructed_rejection"))
        sim_batches = list()
        for i in range(n_batches):
            # print("Doing batch " + str(n_batches - i))
            sse_sim = distsse.DnSSE(
                self.sse_stash,
                n=n_sim,
                origin=start_at_origin,
                start_states_list=start_states_list,
                stop=stop_condition,
                stop_value=stop_condition_value,
                condition_on_speciation=True,
                condition_on_survival=True,
                epsilon=1e-12,
                runtime_limit=3600,
                min_rec_taxa=50,
                max_rec_taxa=200,
                debug=False)

            trs = sse_sim.generate()

            sim_batches.append(trs)

            # printing progress
            pjh.print_progress(i , n_batches)

        # "expectations" from diversitree
        n1_ci_width_maxt_divtree = [
            3.15488977514799, 3.19261297144745, 3.07056809641921, 3.30491575735787, 3.69653111121246,  3.3205183521355, 2.99445423542936, 3.12799325091628, 3.06350513687122, 3.49211236469802,
            3.05989050441186,  3.1908458519504, 3.41907958552023, 3.08143410689755, 3.05431570566944, 3.20713655827661, 3.63568539937552, 2.89172152954679, 3.03518163176074, 3.30536189702475,
            3.05578909077062, 3.56776996223612, 3.56884437623976, 3.16812840164235, 2.72063792281713, 2.80779626732209, 3.39164674427921, 3.00232597884246, 3.16041670158806, 3.24784156353388,
             3.0438832444193, 3.11268722359301, 3.23223809979051, 3.09734126455108, 3.65173381020661, 3.08541088166339, 3.24679478161762, 3.30143556188712, 2.93631262365546,  3.1609814455947,
            3.27242221449174, 3.13840205985354, 3.47238858203492, 3.17120122312914, 3.27643720642969, 3.46734721967936, 2.64049189509849, 3.32129130029483, 3.32173056782944, 3.00581038374517,
            3.33092782512044, 3.33500269931592, 3.05096809911513, 3.12446129730932, 2.79099673329306, 3.17227784229044, 3.24343168283411, 2.72636484630203, 3.22812786749362, 3.32455637955022,
            3.33597818368469,  3.3505995316985, 3.31169703855161, 3.20549487088542, 2.98581456026372, 2.59681340667575, 3.11585021514711, 3.01763305224141, 2.81892771819429, 3.14210915048083,
            2.85986850895017, 2.86921074538176, 3.20654121848739, 3.57279506823383, 3.32628862854745, 3.26054335188093, 3.30457993883053, 3.18698359676679, 3.20213262749069, 3.18380108281744,
            2.95600008501797, 3.02967920133969, 3.42266180684572, 3.20369609777031, 3.26201340093489, 3.14736571690669, 3.12268916250987, 3.06031150167311, 2.88617415743934, 2.95615760736737,
            3.34274288366046, 2.94019533357836, 3.20013977750278, 3.56611638553084,  3.4732271666436, 3.18397658460503, 3.60827816706377, 3.52216577082506, 2.56134771185212,  2.9597153767062
        ]

        n1_mean_maxt_divtree = [
            38.76, 38.37, 38.16, 38.68, 38.27, 36.28, 37.11, 38.55, 37.39, 37.95,
            38.45, 36.76,  37.4, 38.23, 38.47, 37.46,  38.4, 36.84, 36.56, 38.08,
            35.33, 38.26,  41.1, 36.98,  36.3, 34.15, 37.93, 35.84, 39.41, 39.02,
            38.48, 36.29, 38.81,  36.1, 38.81, 39.47, 38.66, 38.07, 38.22, 39.81,
            38.51, 38.46, 40.05, 36.72, 36.95, 36.79, 34.27, 37.69, 36.97, 37.19,
            39.21, 36.79, 37.24, 36.96, 35.42, 37.32, 38.09, 37.31, 38.52, 38.13,
            42.08, 36.87, 37.69, 39.73, 37.44, 36.09, 40.92, 36.53, 35.28, 39.46,
            36.87, 35.74,  39.5, 39.27,  40.3,  37.1, 40.86, 39.18, 40.91, 37.07,
            36.67, 36.56, 38.78,  38.4, 37.77, 35.14, 37.37, 37.19, 37.54, 36.93,
            36.89, 35.98, 36.87, 39.54, 41.32, 34.81, 38.58,  38.2, 34.25, 37.45
        ]

        n2_ci_width_maxt_divtree = [
            3.10907984698841, 3.21457624547619, 3.34112020989513, 3.41526183115637, 3.22029234509521, 3.27528879096828, 3.14565891310163,  3.3049175185539, 3.05698251988275, 3.32068429116894,
            3.23809139419685, 3.17744786375303, 3.28223532478595, 3.23412958418068,  2.9457647993228, 3.40202678128877,  3.6264542549204, 2.87365341646828, 3.32802347383913, 3.21542353746012,
            2.68824239647808, 3.18448658177342, 3.51399206727746, 3.28945621467786, 2.42879647329431, 2.93452471976453, 3.02849231043162,  2.7704582999784, 3.10353651647454, 3.57001357573176,
            3.32848050605557, 3.24660773538701, 2.98149672236187, 3.54594631919123, 3.13477414171994,  3.3752049853799, 3.40448221038208,  2.9809318198757, 3.31242342947903, 3.76780588296653,
            3.54531976498025, 2.79404197823898, 3.21140476364466, 3.20937112163172, 2.99874112307687, 2.94021051098198, 3.00884585248902, 2.99550693950898, 3.63508498782172, 2.88213250902799,
            3.01721703173067,  2.9075128443049,  3.1663047241958, 3.44478888558684, 3.37901517204781,  3.0814995890267, 3.15258336267034, 2.68372558503241, 3.14740948474241,  3.7366777822666,
            3.64057626052344, 3.16186028122367, 3.46074703793936, 3.09016621016809, 2.72691773786649, 3.05642902985583, 3.30054686353396, 2.65864124360964, 2.85021861461733, 3.28199886740635,
            2.87063855522556, 2.84707535665367, 3.17722742355817, 2.98953952739524, 3.35134064800788, 3.33501724351546, 3.22755263043412, 3.03433452381642, 3.14695574917614,  3.0931784859362,
            3.25694664197725, 2.70076207157771, 3.37483246865902, 3.34508522722123, 3.12490029345584, 3.06065130059574, 2.91686345420986, 3.13709859545022, 3.23315997660856, 3.12361666164222,
            3.07021422843502, 2.81426767509253, 3.25136659379909, 3.06928639513382, 2.98266458568627,  2.7919141997178, 3.60334885203958, 3.01510711108463, 3.01979260803711, 3.16159518335829
        ]

        n2_mean_maxt_divtree = [
            37.95, 39.02, 38.96, 37.82, 40.15, 37.92, 39.42, 38.61, 36.47,  36.7,
            39.01, 35.42, 38.05, 38.03, 34.66, 40.76, 38.26, 38.49, 36.75,  36.2,
            35.16, 37.32, 40.39, 37.36, 33.72, 34.17, 37.17,  34.8,  38.0, 38.43,
            39.79, 38.37, 37.24, 37.22, 38.59, 40.11, 37.37, 36.62, 37.39, 39.25,
            37.27, 37.09, 40.16, 37.61,  35.2, 35.09, 35.66, 36.14, 36.35, 37.18,
            38.34, 36.84, 36.91, 37.18, 37.83, 36.75, 37.45, 37.03, 35.95, 38.15,
            41.73, 36.23, 38.65, 38.21, 36.78, 34.91, 39.19, 35.38, 34.13, 37.85,
            36.58, 36.22, 38.25,  37.4, 40.83, 36.54, 41.69, 38.19, 41.19, 36.79,
            36.71, 37.87, 37.87, 38.28, 36.03, 36.85, 37.61, 37.68, 39.45, 36.24,
            37.96, 37.43,  36.7, 37.78, 40.09, 33.38, 39.95, 36.06, 35.43, 36.19
        ]

        n3_ci_width_maxt_divtree = [
            1.81452139823328, 1.65595426423936, 1.80393474271094, 1.71101569504399, 1.94003200265179, 1.94623064398749, 1.49681400422107, 1.80831869006779, 1.71409725735641, 1.59315327548605,
            1.74945561795432, 1.77625855065862, 1.85442907394784, 1.70092213896706, 1.72213759161237, 1.98076793229701, 2.13767105178897, 1.59110599282513, 1.66037252775065, 1.66537566435755,
            1.72506432777143, 1.67900311163764, 1.89598106967492, 1.86326663988629, 1.69453147018117, 1.54315970435056, 1.67661169426118, 1.52130407854378,   1.870109930329,   1.856599824704,
            1.57528358838604, 1.79179624157244, 1.69831369293071, 2.10406532294801, 1.90118367169912, 1.90562897636333, 1.82101091737862, 1.70920041604904, 1.76347637570702, 1.77304428904331,
            1.81434282239375, 1.88056857252257, 1.74767249503418, 1.83487826299185, 1.65298028439726, 1.68359022774234, 1.55212580766776, 1.80418425048468, 1.76255195335707, 1.64727182304254,
            1.88930851548038,  1.6763663464997, 1.77894357210319, 2.06297271279515, 1.74015941264418, 1.80971296345609, 1.76696720142426, 1.41102813207071, 1.86782711807873, 1.81473523839004,
            2.09653379393009, 1.74448564084406, 1.83524091567997, 1.69347203392822, 1.48484480241968,  1.8172833430951, 1.78441022778119,  1.5450344449104, 1.67728737230474, 1.86909811341614,
            1.65588865043102, 1.62851650953197, 1.82204730848116, 1.89006419045502, 1.78979514611324, 1.90027416799139, 1.70446367476279, 1.78454069987068, 1.99307654006199,  1.7615080940071,
            1.60144344788309, 1.87363404251004, 1.99296264071174, 1.80272973665892, 1.92421413747761, 1.64219344767782,  1.4209484560488, 1.88486795336335, 1.72748413736523, 1.62549352431062,
            1.80173930736862, 1.72367812458467, 1.75070615893973, 1.78509727364187, 1.74822193954286, 1.90120918460762, 1.90620312229163, 1.79082685084208, 1.56989945557225, 1.82357472403557
        ]

        n3_mean_maxt_divtree = [
            21.53, 20.95, 21.59, 20.43, 21.37, 20.69, 20.68,  21.3, 19.27, 20.03,
            21.13, 19.46, 20.24, 20.32, 20.47, 21.53, 21.41, 20.67, 20.07, 20.31,
            19.03, 20.46, 22.04, 20.47, 19.96, 18.46, 20.72, 19.24, 21.15,  21.1,
             20.5, 20.27, 21.47, 21.46, 21.25, 21.42, 19.73, 20.07, 20.24, 20.84,
            20.74, 21.04, 20.74, 20.42, 20.19, 19.71, 18.58, 20.93, 20.04, 20.46,
            22.95, 20.14, 20.16, 20.62, 20.27,  20.0,  20.6, 20.97, 20.82, 20.53,
            23.13, 19.88, 21.11, 21.21, 20.11, 19.82, 22.06, 20.32,  19.0,  21.3,
            20.59, 20.43, 21.16, 20.67, 21.26, 20.96, 21.46, 21.54, 22.52, 20.42,
            20.22, 21.55, 20.61, 20.49, 20.89, 19.39, 19.87, 20.62, 21.66, 21.22,
            19.89, 20.21, 20.71, 20.98, 23.09,  18.7,  21.8, 20.18, 19.08, 20.11
        ]

        root_ages_ci_width_maxt_divtree = [
            0.0730264579063269, 0.0758052801790659, 0.0715589500758612, 0.0835891790031388,    0.0824972583323, 0.0857001047471439, 0.0748963602201814, 0.0776661820159541, 0.0791485065418982, 0.0809679920684232,
            0.0730100372968544, 0.0821909140457225,  0.088856802107959, 0.0791443477406731, 0.0728892709370296, 0.0739771314857953, 0.0752537615998883,   0.07803474438469, 0.0768271248236724, 0.0753670016645899,
            0.0836029776314677, 0.0858892260216891, 0.0714920226360124, 0.0771086521822151, 0.0744144265710963, 0.0814584778663016, 0.0706296683894349, 0.0781780806603417, 0.0790461043947846, 0.0760544597474094,
             0.073501215307985, 0.0891777919223358,  0.073692070069458, 0.0789041723423129, 0.0781863729175354, 0.0664623880934654, 0.0885768980684716,  0.076863380734358, 0.0738658482076897, 0.0818346607489402,
            0.0739087048496242, 0.0755649153362207, 0.0695939099706147, 0.0739045128561599, 0.0755220677858747, 0.0800050560487279, 0.0769774740201287, 0.0807566684483642, 0.0825141360983852, 0.0805595058495369,
            0.0699947568638453, 0.0899316461529296, 0.0896375455734018, 0.0826953555955675, 0.0728058520301239, 0.0830405448080069, 0.0905807848446868, 0.0765131576032694, 0.0738228255084462,  0.078331213134485,
            0.0761375773156565, 0.0794963570396137, 0.0879051764940916, 0.0705833441811012, 0.0837527525390509, 0.0722163702079418, 0.0872206665286526, 0.0833930716764473, 0.0770882841277292, 0.0738637608401215,
            0.0734276760477509, 0.0715110132391905, 0.0723468075783322, 0.0876668941903055, 0.0711613865723084, 0.0746044230708636, 0.0788033087929488, 0.0719523575043292, 0.0690322427729104,  0.079901297257154,
            0.0768826809107657, 0.0676685598092447, 0.0821927219808265,  0.081451670234759, 0.0859700655957168, 0.0740457899083073,  0.073951996665021,  0.085547992419145,   0.08267201467815, 0.0816292817727156,
            0.0832207673131519, 0.0764259511690066, 0.0746746556850834,  0.081542585623176, 0.0719841712701241, 0.0845965964187198, 0.0699081352328313, 0.0839050130895889, 0.0784048920018988,  0.095599345881617
        ]

        root_ages_mean_maxt_divtree = [
            3.49565641584139, 3.48335421321057, 3.47764393042787, 3.43792468490524, 3.38763425224964, 3.42872010244232, 3.39936924608429, 3.47597618589444, 3.48264088663815, 3.44745930932886,
            3.51628335631726, 3.44846817257636, 3.40858869537075, 3.40573363632371, 3.44877863364417,  3.4946332725055, 3.48409071169806, 3.46996711030663, 3.44103794528273, 3.46926003220297,
            3.43928684696817, 3.43466620578636, 3.47672703414802, 3.48162819195309,   3.486387466488, 3.39876508021939, 3.49163276864955,  3.4725403669116, 3.42535077305057, 3.48352131946212,
            3.49568629223881, 3.38723670198524, 3.46439708954158, 3.39900510806101, 3.45878455105049, 3.51942657334782, 3.46612369141501, 3.41481367599382, 3.46159368541625, 3.47964873593384,
            3.52541742283381, 3.45755080843473, 3.49399425135894, 3.47513207502527, 3.45266644662137, 3.47390212554197, 3.42008778397714, 3.46657146136891, 3.45569541295889, 3.39990875855521,
            3.51312677509363, 3.44109456106392, 3.43787884660501, 3.44698378161729, 3.47220564615896, 3.42074325313885,  3.4495350360803, 3.52575180300391, 3.48111590576645, 3.49611187071311,
            3.45695130413816, 3.39988899007902, 3.37816430540626, 3.51270529302678, 3.47320626379616,  3.4625893289101, 3.46362388552543, 3.39735130365189, 3.42459969592028, 3.48265424426265,
            3.48352518194255, 3.44354883001289, 3.51361467723765, 3.42301049372833, 3.50245575183012, 3.47156552024112,  3.4620531180605, 3.48320315613903, 3.49036612635961,  3.4371222352821,
            3.43713344857619, 3.51731472052924, 3.51729314871985,   3.478808405997, 3.42526447593001, 3.46360214931532, 3.46417104097192, 3.46335157328895,  3.4810215582334, 3.44847490472833,
            3.42853665440369, 3.42253569888058,  3.3880057349601, 3.44442823723426, 3.48981343561251, 3.36803716119566, 3.47909851028106, 3.40794848524497, 3.43652565042655, 3.40980193529854
        ]

        # parsing simulations
        n1_ci_overlap_count = 0
        n2_ci_overlap_count = 0
        n3_ci_overlap_count = 0
        root_age_ci_overlap_count = 0
        global_mean_n1 = 0.0
        global_mean_n2 = 0.0
        global_mean_n3 = 0.0
        global_mean_root_age = 0.0
        for i, batch in enumerate(sim_batches):
            rec_trs = [ann_tr.extract_reconstructed_tree() for ann_tr in batch]
            rec_n1s, rec_n2s, rec_n3s, rec_root_ages = [], [], [], []
            
            for rec_tr in rec_trs:
                state_count_dict = dict((int(s), 0) for s in range(3))
                
                for nd in rec_tr.leaf_node_iter():
                    try:
                        state_count_dict[nd.state] += 1
                    except:
                        print("WARNING: found node without state")

                rec_n1s.append(state_count_dict[1])
                rec_n2s.append(state_count_dict[2])
                rec_n3s.append(state_count_dict[0])
                rec_root_ages.append(rec_tr.max_distance_from_root())

            mean_rec_n1 = statistics.mean(rec_n1s)
            mean_rec_n2 = statistics.mean(rec_n2s)
            mean_rec_n3 = statistics.mean(rec_n3s)
            mean_rec_root_ages = statistics.mean(rec_root_ages)

            global_mean_n1 += mean_rec_n1
            global_mean_n2 += mean_rec_n2
            global_mean_n3 += mean_rec_n3
            global_mean_root_age += mean_rec_root_ages

            stdevs_rec_n1 = statistics.stdev(rec_n1s)
            stdevs_rec_n2 = statistics.stdev(rec_n2s)
            stdevs_rec_n3 = statistics.stdev(rec_n3s)
            stdevs_rec_root_ages = statistics.stdev(rec_root_ages)

            sterr_rec_n1 = stdevs_rec_n1 / math.sqrt(n_sim)
            sterr_rec_n2 = stdevs_rec_n2 / math.sqrt(n_sim)
            sterr_rec_n3 = stdevs_rec_n3 / math.sqrt(n_sim)
            sterr_rec_root_ages = stdevs_rec_root_ages / math.sqrt(n_sim)
            
            n1_rec_ci_width_maxt = 1.96 * sterr_rec_n1
            n2_rec_ci_width_maxt = 1.96 * sterr_rec_n2
            n3_rec_ci_width_maxt = 1.96 * sterr_rec_n3
            root_rec_ages_ci_width_maxt = 1.96 * sterr_rec_root_ages

            # note that we're matching diversitree's state coding:
            # 0=AB, 1=A, 2=B
            # n3s = [ann_tr.alive_state_count_dict[0] for ann_tr in batch]
            # n1s = [ann_tr.alive_state_count_dict[1] for ann_tr in batch]
            # n2s = [ann_tr.alive_state_count_dict[2] for ann_tr in batch]
            # root_ages = [ann_tr.root_age for ann_tr in batch]
            
            # mean_n1 = statistics.mean(n1s)
            # mean_n2 = statistics.mean(n2s)
            # mean_n3 = statistics.mean(n3s)
            # mean_root_ages = statistics.mean(root_ages)
            
            # stdevs_n1 = statistics.stdev(n1s)
            # stdevs_n2 = statistics.stdev(n2s)
            # stdevs_n3 = statistics.stdev(n3s)
            # stdevs_root_ages = statistics.stdev(root_ages)
            
            # sterr_n1 = stdevs_n1 / math.sqrt(n_sim)
            # sterr_n2 = stdevs_n2 / math.sqrt(n_sim)
            # sterr_n3 = stdevs_n3 / math.sqrt(n_sim)
            # sterr_root_ages = stdevs_root_ages / math.sqrt(n_sim)
            
            # n1_ci_width_maxt = 1.96 * sterr_n1
            # n2_ci_width_maxt = 1.96 * sterr_n2
            # n3_ci_width_maxt = 1.96 * sterr_n3
            # root_ages_ci_width_maxt = 1.96 * sterr_root_ages

            if abs(mean_rec_n1 - n1_mean_maxt_divtree[i]) \
                    <= (n1_rec_ci_width_maxt + n1_ci_width_maxt_divtree[i]):
                n1_ci_overlap_count += 1

            if abs(mean_rec_n2 - n2_mean_maxt_divtree[i]) \
                    <= (n2_rec_ci_width_maxt + n2_ci_width_maxt_divtree[i]):
                n2_ci_overlap_count += 1

            if abs(mean_rec_n3 - n3_mean_maxt_divtree[i]) \
                    <= (n3_rec_ci_width_maxt + n3_ci_width_maxt_divtree[i]):
                n3_ci_overlap_count += 1

            if abs(mean_rec_root_ages - root_ages_mean_maxt_divtree[i]) \
                    <= (root_rec_ages_ci_width_maxt \
                        + root_ages_ci_width_maxt_divtree[i]):
                root_age_ci_overlap_count += 1
    
        print("\n\nPJ global mean taxon count at state 1 = " \
              + str(global_mean_n1 / 100.0))
        print("diversitree global mean taxon count at state 1 = " \
              + str(statistics.mean(n1_mean_maxt_divtree)))
        print("\nPJ global mean taxon count at state 2 = " \
              + str(global_mean_n2 / 100.0))
        print("diversitree global mean taxon count at state 2 = " \
              + str(statistics.mean(n2_mean_maxt_divtree)))
        print("\nPJ global mean taxon count at state 3 = " \
              + str(global_mean_n3 / 100.0))
        print("diversitree global mean taxon count at state 3 = " \
              + str(statistics.mean(n3_mean_maxt_divtree)))
        print("\nPJ global mean root age = " \
              + str(global_mean_root_age / 100.0))
        print("diversitree global mean root age = " \
              + str(statistics.mean(root_ages_mean_maxt_divtree)))
        
        # [==== * ====][.... + ....] if we take '+' to be the "truth" of the '*' interval, + cannot be more than '====' away from '*' 95% of the time
        # then abs('+' - '*') can be at most ('====' + '....'). '....' can be added because we still are guaranteed to see '+' falling within that range
        # 95% of the time

        print("\n95% CIs of simulations here and from diversitree " \
              + "overlapped " + str(n1_ci_overlap_count) \
              + " times for state 1 count.")
        print("\n95% CIs of simulations here and from diversitree " \
              +"overlapped " + str(n2_ci_overlap_count) \
              + " times for state 2 count.")
        print("\n95% CIs of simulations here and from diversitree " \
              + "overlapped " + str(n3_ci_overlap_count) \
              + " times for state 3 count.")
        print("\n95% CIs of simulations here and from diversitree " \
              + "overlapped " + str(root_age_ci_overlap_count) \
              + " times for root age.")
        exp_count = int(0.95 * n_batches)
        a_delta = math.ceil(0.07 * exp_count)
        self.assertAlmostEqual(
            n3_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                + "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)
        self.assertAlmostEqual(
            n2_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                + "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)
        self.assertAlmostEqual(
            n1_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                + "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)
        self.assertAlmostEqual(
            root_age_ci_overlap_count,
            exp_count,
            msg="Mean absolute difference must be 1.96 * (stderr_python " \
                + "+ stderr_divtree) apart " + str(exp_count) + " (+/- " \
                + str(a_delta) + ") out of 100 times.",
            delta=a_delta)


if __name__ == '__main__':
    # Assuming you opened the PhyloJunction/ (repo root) folder
    # on VSCode and that you want to run this as a standalone script,
    # i.e., "Run Without Debugging", you will need to configure your
    # launch.json to have:
    # 
    # "env": {"PYTHONPATH": "${workspaceRoot}/src/phylojunction/"}
    # 
    # and your settings.json to have:
    #   
    # "python.analysis.extraPaths": [ "${workspaceFolder}/src/phylojunction/" ]
    # 
    # If you want to run this as a standalone from PhyloJunction/
    # on the terminal, remember to add "src/" to
    # PYTHONPATH (system variable), or to set it if it does not
    # exist -- don't forget to export it!
    # 
    # Then you can do:
    # $ python3.9 tests/distribution/test_dn_discrete_sse_geosse.py
    # 
    # or
    #
    # $ python3.9 -m tests.distribution.test_dn_discrete_sse_geosse
    #
    # or 
    #
    # $ python3.9 -m unittest tests.distribution.test_dn_discrete_sse_geosse.TestGeoSSETrees.test_tree_size_state_count_max_t_geosse

    unittest.main()