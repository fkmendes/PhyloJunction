import unittest
import math
import statistics

# pj imports
import phylojunction.utility.helper_functions as pjh
import phylojunction.calculation.discrete_sse as sseobj
import phylojunction.distribution.dn_discrete_sse as distsse

__author__ = "Fabio K. Mendes"
__email__ = "f.mendes@wustl.edu"

class TestGeoSSETrees(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        total_n_states = 3

        # calling state 0 "1" to match R unit test
        rates_t0_s1 = [ sseobj.MacroevolStateDependentRateParameter(name="sA", val=1.25, event=sseobj.MacroevolEvent.W_SPECIATION, states=[1,1,1]),
                        sseobj.MacroevolStateDependentRateParameter(name="xA", val=1.0, event=sseobj.MacroevolEvent.EXTINCTION, states=[1]),
                        sseobj.MacroevolStateDependentRateParameter(name="dA", val=1.0, event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION, states=[1,0]) ]
        
        rates_t0_s2 = [ sseobj.MacroevolStateDependentRateParameter(name="sB", val=1.25, event=sseobj.MacroevolEvent.W_SPECIATION, states=[2,2,2]),
                        sseobj.MacroevolStateDependentRateParameter(name="xB", val=1.0, event=sseobj.MacroevolEvent.EXTINCTION, states=[2]),
                        sseobj.MacroevolStateDependentRateParameter(name="dB", val=1.0, event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION, states=[2,0]) ]
        
        rates_t0_s3 = [ sseobj.MacroevolStateDependentRateParameter(name="sAB", val=0.75, event=sseobj.MacroevolEvent.BW_SPECIATION, states=[0,1,2]),
                        sseobj.MacroevolStateDependentRateParameter(name="sAB_AB_A", val=1.0, event=sseobj.MacroevolEvent.ASYM_SPECIATION, states=[0,0,1]),
                        sseobj.MacroevolStateDependentRateParameter(name="sAB_AB_B", val=1.0, event=sseobj.MacroevolEvent.ASYM_SPECIATION, states=[0,0,2]),
                        sseobj.MacroevolStateDependentRateParameter(name="dAB_B", val=1.0, event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION, states=[0,2]),
                        sseobj.MacroevolStateDependentRateParameter(name="dAB_A", val=1.0, event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION, states=[0,1])
                      ]
        
        rates_t0 = rates_t0_s1 + rates_t0_s2 + rates_t0_s3

        # original implementation
        # matrix_atomic_rate_params = [ [ rates_t0_s1, rates_t0_s2, rates_t0_s3 ] ] # 1D: time slices, 2D: states, 3D: parameters of state, several parameters -> matrix
        matrix_atomic_rate_params = [ rates_t0 ]

        fig_rates_manager = sseobj.FIGRatesManager(matrix_atomic_rate_params, total_n_states)
        
        cls.event_handler = sseobj.MacroevolEventHandler(fig_rates_manager)


    def test_tree_size_state_count_max_taxa_geosse(self):
        """
        Test if GeoSSE (GeoSSE) trees simulated here have similar root ages and number of tips for the three states 
        (A, B, AB) as GeoSSE trees simulated with diversitree
        """
        
        stop_condition = "size"
        stop_condition_value = [50] # 50 living taxa

        start_at_origin = True

        # simulation initialization
        n_batches = i = 100
        n_sim = 100
        start_states_list = [0 for i in range(n_sim)]
        # seeds_list = [i+1 for i in range(n_sim)]
    
        # simulations
        sim_batches = list()
        for i in range(n_batches):
            # print("Doing batch " + str(n_batches - i))
            sse_sim = distsse.DnSSE(self.event_handler, stop_condition_value, n=n_sim, stop=stop_condition, origin=start_at_origin,
                start_states_list=start_states_list, epsilon=1e-12, runtime_limit=3600,
                condition_on_speciation=True, condition_on_survival=True,
                debug=False)

            trs = sse_sim.generate()

            # n0, n1, n2 = float(), float(), float()
            # for tr in trs:
            #     n0 += float(tr.state_count_dict[0])
            #     n1 += float(tr.state_count_dict[1])
            #     n2 += float(tr.state_count_dict[2])
            
            # print(str(n0/100) + " " + str(n1/100) + " " + str(n2/100))

            sim_batches.append(trs)

            # printing progress
            pjh.print_progress(i, n_batches)


        # "expectations" from diversitree
        n1_ci_width_maxtaxa_divtree = [
            1.33148919498569, 1.31801361100251, 1.40783445479972, 1.27859702088585, 1.42576435017229, 1.45010567584266, 1.50838729265612,  1.3304731619794, 1.45984020379152, 1.39555536897638,
            1.45940420997091, 1.21229068487985, 1.23097432051923, 1.35532349800423, 1.43056810075896, 1.39452062274917, 1.28250000492252, 1.42137577058712, 1.33575913331043, 1.25284458491043,
              1.149974650577, 1.24997942673979, 1.16104988782576, 1.38224397910708, 1.20310616104626, 1.34280555088023,  1.2758018648614, 1.40721828850934,  1.3316931827299, 1.35186190436925,
            1.24986766426763, 1.37476751180523, 1.58350925772252, 1.39291134685665, 1.29779277672251, 1.23516605124227, 1.47226973593616, 1.36936150335428, 1.41180893147405, 1.37424805724013,
            1.35316874652264, 1.38575428900471, 1.51776979183607, 1.25562903805707, 1.33817392537198,  1.4498848935155, 1.14519170182961, 1.24070641266346, 1.20733197396306, 1.35463618374198,
            1.51585109260425, 1.27327640678715, 1.44198418349667, 1.42743309404672, 1.15158645495348, 1.34184580306081,   1.208809524727, 1.36003367456824, 1.39078553488322, 1.48894860823999,
            1.32952786090751, 1.32807942989914, 1.41570783951657, 1.38393856289164, 1.27415837399446, 1.37408568741678,  1.2044600342649, 1.51346211760128, 1.46169438141031, 1.36402226054883,
            1.32271583180862,  1.3198391796738, 1.27176848855633, 1.32769369413828, 1.09642563437616, 1.36987148022113,  1.3400632453038, 1.37660801929521, 1.21631711441888, 1.45814734038184,
            1.10079660778782, 1.57714966834592, 1.46557972450798, 1.17665974759748,  1.3232863064692, 1.25938136552769, 1.33053149188927, 1.27550528011293, 1.23523987675727, 1.23536552706256,
            1.27882765188759,  1.2947618596218, 1.48697575860088, 1.42722647697051, 1.47477543519087, 1.44228554591648,  1.3054945955422, 1.35463761600919, 1.50933369472102, 1.30562537297092
        ]

        n1_mean_maxtaxa_divtree = [
            28.18, 29.65, 29.77, 29.01, 29.44, 29.36, 29.69, 29.39, 29.14, 28.9,
            28.18, 29.08, 28.3, 29.89, 30, 28.62, 28.85, 29.66, 29.17, 30.51,
            27.8, 29.57, 29.02, 29.27, 29.41, 27.85, 29.29, 28.74, 29.72, 29.94,
            29.11, 28.79, 29.02, 29, 29.34, 28.94, 28.98, 29.42, 28.79, 29.97,
            29.75, 29.55, 29.88, 29.51, 29.75, 31.19, 28.77, 30.01, 29.66, 29.51,
            29.62, 29.6, 29.43, 29.47, 29.62, 29.33, 28.94, 28.95, 29.55, 29.74,
            28.63, 28.69, 28.7, 29.89, 28.89, 29.68, 29.29, 30.47, 30.4, 28.45,
            28.85, 29.78, 29.33, 30.85, 29.2, 28.98, 28.11, 29.06, 28.88, 30.13,
            30.45, 30.28, 29.87, 28.6, 28.56, 29.37, 27.41, 28.56, 28.17, 27.53,
            31.07, 29.59, 29.17, 29.31, 29.99, 29.05, 27.67, 28.7, 29.55, 30.99
        ]

        n2_ci_width_maxtaxa_divtree = [
            1.65879776545143, 1.66918326898353, 1.63472968191359, 1.65339926359258, 1.61573393349226, 1.75063633844809, 1.70857483289318, 1.80834444023959, 1.77321389390433, 1.43824420173988,
            1.60323551443557, 1.41262913045216, 1.89178796983919, 1.75472666886448, 1.87436808864139, 1.51010477929329, 1.64944583580442, 1.55246077925051, 1.77783840194612, 1.72791087686369,
            1.62711482897387, 1.71578636517169, 1.69486462616048, 1.81752247842935,  1.7089370405269, 1.56119949533762, 1.59109257931762, 1.82856423226398, 1.83053248575767,  1.8084259800314,
             1.4991906832176,  1.8735677674944, 1.70242146783381, 1.67881821060007, 1.77682208655586,  1.3373399800433,  1.7739632437858, 1.60526732774805, 1.74917168275661, 1.46710532503548,
            1.55779433764019, 1.63065960552499, 1.64628215066433, 1.67018725134203, 1.86435759304579, 1.67088410638491, 1.74586754747699, 1.41967120734686, 1.55535128072878, 1.93495290950974,
             1.7298770089988, 1.59618037967031,  1.6091303509861, 1.60044968226263, 1.50444098145014, 1.59695812813934, 1.44931873428013, 1.58676875607397, 1.57578109744682, 1.68828555150909,
            1.56187044354653, 1.73393238878824,  1.5461943374922, 1.50859308274065, 1.67453667899301, 1.57516534530522, 1.50408112611634, 1.61885304902682, 1.57901231422837, 1.68211448414719,
              1.419764136906, 1.61440648455516, 1.60449360701422, 1.57996184789636, 1.48005073131725, 1.63716687091827, 1.66626201148231, 1.48859282803484, 1.55524774004957, 1.72240007506556,
            1.72272333662299, 1.54959243178536, 1.53735392506381, 1.91992606381211, 1.72206210613141, 1.63902523384227, 1.58681399672489, 1.56614283957096,  1.6368030056155, 1.58348475244068,
            1.66667066714671, 1.81837520947252, 1.40356122816645, 1.64169360986966, 1.86345822750513, 1.52760022852244, 1.56780695781391, 1.58461650078038,  1.7346349537082, 1.61298291962125
        ]

        n2_mean_maxtaxa_divtree = [
            39.36, 37.67, 37.82, 37.48, 37.94, 39.98,  37.5, 39.74, 38.51, 37.95,
            39.02, 38.12, 39.03, 39.03, 38.96, 38.55, 38.13, 37.64, 38.37, 38.24,
            38.65, 38.56, 38.05,  39.1, 36.41, 39.78,  38.4, 38.55, 38.37,  37.8,
            36.67, 40.17, 38.03, 37.74,  38.6,  37.7, 40.04, 38.18, 41.15, 37.46,
            37.11, 38.43, 38.34, 38.45, 38.19, 36.95, 39.49, 38.02, 39.09, 38.71,
            37.68, 38.61, 39.18, 37.52, 37.95, 36.41, 37.22, 38.71, 38.64, 37.31,
            37.88, 40.02,  38.3, 36.49, 37.76, 39.14, 37.98, 38.06, 35.87, 37.89,
            38.44, 38.79, 38.58, 39.36, 38.78, 38.37,  38.7, 37.43, 37.92, 38.74,
            37.83, 37.67, 38.05, 38.63, 37.76,  37.9, 39.48,  39.3, 37.76, 39.68,
            37.07, 38.01, 37.85, 38.38, 38.35, 38.23, 38.34,  37.7, 39.76, 36.85
        ]

        n3_ci_width_maxtaxa_divtree = [
            0.477928973210815, 0.565086125195876, 0.612551670547807, 0.538100240746005, 0.590055397501974, 0.465424188403992, 0.543096116276992, 0.500813134368055, 0.497856212254912, 0.558555713289628,
            0.504422415573826, 0.466069885079242, 0.564838861798637, 0.474486208461534, 0.478882029714875, 0.505989306390776, 0.527558621760596, 0.462245138515061, 0.453717218923279, 0.460339814756996,
            0.492748172205764, 0.456501060881416, 0.545352809906328, 0.577932329756502, 0.528484589379975, 0.540086893121109, 0.501490644242369, 0.510113727070204,            0.5096, 0.548782322947631,
            0.521518359787994, 0.563986346994286,  0.49072802481969,  0.51555034201474, 0.498385937833626, 0.468167429258147, 0.492531561415001, 0.557860559674552, 0.489588028836284, 0.512076345318101,
            0.567597273646117, 0.503394383614424, 0.534337205226146, 0.494497260872192, 0.575378615444744, 0.532901012658945, 0.586016857757315,  0.44800671712136, 0.535342059629244, 0.522874504131448,
            0.564429952888019, 0.474064848310904, 0.502881508625215, 0.528572692171182, 0.534308156082766, 0.514627492621232, 0.494728698226093, 0.535787654304437, 0.490854527607444, 0.525166370945167,
            0.505977802842869, 0.527102389762112, 0.547508075305974, 0.557342106644011, 0.462392022230296, 0.431087496801972, 0.526583129546734, 0.525077696607605,  0.50059226175127, 0.504826124281991,
            0.482916558449017, 0.499412624687212, 0.486523017404774, 0.529581157161206, 0.481971479939163, 0.571911826219477, 0.499350461331842,  0.53346504282773, 0.558013567772489, 0.453396387771721,
            0.509474343482247,  0.49561030634721,  0.44455917286883, 0.528660780279813,  0.51595662490938,  0.44855638430301,  0.43609916581466, 0.509295324617032,  0.53660180899261, 0.490510521927116,
            0.476302363859536, 0.546106521595643, 0.493377771954297, 0.500115309531995, 0.494979626557569, 0.496767727769765, 0.499913534341872, 0.550945301873576, 0.493192910399863, 0.556366525509102
        ]

        n3_mean_maxtaxa_divtree = [
            8.56, 8.53, 8.48, 8.59, 8.74, 8.24, 8.67, 8.58, 8.35,  8.6,
            8.23, 8.61, 8.41, 8.41, 8.51, 8.61, 8.74, 8.44, 8.93, 8.17,
            8.73, 8.36, 8.66, 8.15, 8.32, 8.73, 8.83, 8.79, 8.74, 8.83,
            9.03, 8.23, 9.21, 8.52, 8.33, 8.46, 8.22,  8.8, 8.27, 8.68,
            8.76, 8.64, 8.61, 8.72, 8.78, 8.96,  8.7, 8.26, 9.12, 8.88,
             8.7, 8.78, 8.73,  9.2, 8.73, 8.57, 8.75, 8.61, 8.53, 8.95,
            8.32,  8.8, 8.57, 9.07, 8.49, 8.53, 8.71, 8.57, 9.11, 9.18,
            8.01, 8.15,  8.2, 8.35, 8.44, 8.97, 8.79, 8.69, 8.66, 8.68,
            8.97,  8.3, 8.37, 8.76, 8.86, 8.93, 8.17, 8.66, 8.86, 8.86,
            8.44, 8.88, 8.87, 9.12, 8.81, 8.98, 9.14, 8.76, 8.54, 8.77
        ]

        root_ages_ci_width_maxtaxa_divtree = [
            0.402583958506349,  0.35349828513856, 0.279136899947445, 0.335964859631695,  0.28499397804662, 0.350514303436294, 0.275736198280265, 0.455849583827377, 0.259865149105153, 0.316546126933438,
            0.305578753591548, 0.303276427111832, 0.356803245109667, 0.349309953728566, 0.297484943682441, 0.265405747167443, 0.363236300308106, 0.295812793909584, 0.285125509359068, 0.310244618451754,
            0.288206675600422, 0.336788789812009, 0.337736473094787, 0.272428124414821, 0.321512199607884, 0.267271492064018, 0.371021397380774, 0.352442900925604, 0.309540218809714, 0.355374796132488,
            0.305623973266641, 0.302257792816758, 0.300967278683057, 0.266956700043462, 0.293744911020102, 0.256051629776374, 0.309583989206934, 0.324916435756151,  0.28976540917237, 0.298235293668219,
            0.319584333981025, 0.271805481279532, 0.314020616539998, 0.313798716586409, 0.283627264545878, 0.296468492871938,  0.45298408408228, 0.306207593301471, 0.280898905689945, 0.341150709685206,
            0.298711003193309, 0.333910311099175, 0.319905289354395,  0.33376613540649, 0.261567434000333,  0.37741849941295, 0.294467075077753, 0.307454704085834, 0.346391306063803, 0.290871500055408,
            0.343205617473415, 0.350740045134609, 0.284444919739236, 0.246979986168107, 0.306765833389505, 0.309553536719499, 0.305167803383524, 0.254944666242712, 0.343337884707819, 0.283345167670977,
            0.297222585093481, 0.333984832861718, 0.286609263763584, 0.308404383388671, 0.349809192412382, 0.414744183506743, 0.296773462063394,  0.27413513569572, 0.351391384158802,  0.26791640108123,
            0.320410244823906, 0.299108070492746,  0.29918894547005, 0.309930051009676, 0.261255787898873,  0.28158359341994, 0.330409421230667, 0.306513711035209, 0.320042174273291, 0.317514715802498,
            0.286335101220367,  0.36542235825688,  0.32304600165077, 0.294266905897255, 0.343132428237696,  0.30837395518183, 0.305561551256897, 0.262667767787128, 0.375723289860407, 0.323511383964665
        ]

        root_ages_mean_maxtaxa_divtree = [
            5.08809704868853, 4.95753861326743, 4.73636284670131, 4.96319404849764, 4.73567730667835, 5.07163432338756, 4.62637335091147, 5.16307332294441, 4.76080447916564, 4.91593770775134,
            4.67908259075116,  4.9157819421004, 4.90971719868318, 4.82118785285073, 4.76865206960806, 4.57380150527143, 4.84420190154827, 4.82351228903679, 4.75515935691569, 4.77691149408655,
            4.77539392318328, 4.90003057814264, 4.80059210833242, 4.79140720380567, 4.62017727971943, 4.79818435964553, 4.89002658190016,  4.8802668875685, 4.82645552580452, 4.98041134655664,
            4.64552965351449, 4.77548921944079, 4.90378277256892, 4.79361323760426, 4.77139635474947, 4.69246861709882, 4.74756168773244, 5.02304518811842, 5.09361908167418, 4.74091267199378,
            4.69201783819571, 4.69175774995683, 4.83038879119169, 4.76759826602195, 4.79497437782467, 4.90607038574299, 5.09813837617416, 5.07873260639862,  4.8204596281595, 4.81986973522004,
            4.85284012770134, 4.80575537576375, 5.00501395688113, 5.04013324930276, 4.75502249254939, 5.02559335276541, 4.73056759503486,  4.8574636391649, 4.95127186276422, 4.81535239685493,
            4.74811431504154, 5.07250958068098, 4.74875653600774, 4.39826003370807, 4.81985408466801, 4.78999193814117, 4.95907610123399, 4.78060163162943, 4.79770442919843, 4.75592090276486,
            4.93917652978045, 4.79632734760973, 4.71875674806222, 5.03755596934894, 5.01843915972029,  5.1153635330767, 4.80821484679762, 4.75670039780254, 4.75572626809253, 4.74002377788157,
             4.8222321094791, 4.81827122346801, 4.92881100627846, 5.01322490498682, 4.76512822262139, 4.68956597661793, 4.99604570258193, 4.87552788348062, 4.82144322511717, 4.92249089073036,
            4.86686357554131, 4.82568772352076,  4.8844156477878,   4.948674394934, 4.86740785611967,  4.8069211295702, 4.77484137489311, 4.77531869830951, 5.14516991704117,  4.8200173812382
        ]

        
        # parsing simulations
        n1_ci_overlap_count = 0
        n2_ci_overlap_count = 0
        n3_ci_overlap_count = 0
        root_age_ci_overlap_count = 0
        for i, batch in enumerate(sim_batches):
            n1s = [ann_tr.state_count_dict[0] for ann_tr in batch]
            n2s = [ann_tr.state_count_dict[1] for ann_tr in batch]
            n3s = [ann_tr.state_count_dict[2] for ann_tr in batch]
            root_ages = [ann_tr.root_age for ann_tr in batch]
            
            mean_n1 = statistics.mean(n1s)
            mean_n2 = statistics.mean(n2s)
            mean_n3 = statistics.mean(n3s)
            mean_root_ages = statistics.mean(root_ages)
            
            stdevs_n1 = statistics.stdev(n1s)
            stdevs_n2 = statistics.stdev(n2s)
            stdevs_n3 = statistics.stdev(n3s)
            stdevs_root_ages = statistics.stdev(root_ages)
            
            sterr_n1 = stdevs_n1 / math.sqrt(n_sim)
            sterr_n2 = stdevs_n2 / math.sqrt(n_sim)
            sterr_n3 = stdevs_n3 / math.sqrt(n_sim)
            sterr_root_ages = stdevs_root_ages / math.sqrt(n_sim)
            
            n1_ci_width_maxtaxa = 1.96 * sterr_n1
            n2_ci_width_maxtaxa = 1.96 * sterr_n2
            n3_ci_width_maxtaxa = 1.96 * sterr_n3
            root_ages_ci_width_maxtaxa = 1.96 * sterr_root_ages

            if abs(mean_n1 - n1_mean_maxtaxa_divtree[i]) <= (n1_ci_width_maxtaxa + n1_ci_width_maxtaxa_divtree[i]):
                n1_ci_overlap_count += 1

            if abs(mean_n2 - n2_mean_maxtaxa_divtree[i]) <= (n2_ci_width_maxtaxa + n2_ci_width_maxtaxa_divtree[i]):
                n2_ci_overlap_count += 1

            if abs(mean_n3 - n3_mean_maxtaxa_divtree[i]) <= (n3_ci_width_maxtaxa + n3_ci_width_maxtaxa_divtree[i]):
                n3_ci_overlap_count += 1

            if abs(mean_root_ages - root_ages_mean_maxtaxa_divtree[i]) <= (root_ages_ci_width_maxtaxa + root_ages_ci_width_maxtaxa_divtree[i]):
                root_age_ci_overlap_count += 1

        # [==== * ====][.... + ....] if we take '+' to be the "truth" of the '*' interval, + cannot be more than '====' away from '*' 95% of the time
        # then abs('+' - '*') can be at most ('====' + '....'). '....' can be added because we still are guaranteed to see '+' falling within that range
        # 95% of the time
    
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n1_ci_overlap_count) + " times for state 1 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n2_ci_overlap_count) + " times for state 2 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n3_ci_overlap_count) + " times for state 3 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(root_age_ci_overlap_count) + " times for root age.")
        exp_count = int(0.95 * n_batches)
        a_delta = math.ceil(0.07 * exp_count)
        # self.assertAlmostEqual(n3_ci_overlap_count, exp_count,
        #                         msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        # self.assertAlmostEqual(n2_ci_overlap_count, exp_count,
        #                         msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        # self.assertAlmostEqual(n1_ci_overlap_count, exp_count,
        #                         msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        # self.assertAlmostEqual(root_age_ci_overlap_count, exp_count,
        #                         msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)


    def test_tree_size_state_count_max_t_geosse(self):
        """
        Test if GeoSSE trees simulated here have similar root ages and number of tips for the three states 
        (A, B, AB) as GeoSSE trees simulated with diversitree

        Note: condition_on_speciation=False to match diversitree!
        """

        stop_condition = "age"
        stop_condition_value = [ 4.0 ] # 4.0 time units
        
        start_at_origin = True

        # simulation initialization
        n_batches = i = 100
        n_sim = 100
        start_states_list = [0 for i in range(n_sim)]
        # seeds_list = [i+1 for i in range(n_sim)]
    
        # simulations
        sim_batches = list()
        for i in range(n_batches):
            # print("Doing batch " + str(n_batches - i))
            sse_sim = distsse.DnSSE(self.event_handler, stop_condition_value, n=n_sim, stop=stop_condition, origin=start_at_origin,
                start_states_list=start_states_list, epsilon=1e-12, runtime_limit=3600,
                condition_on_speciation=False, condition_on_survival=True,
                debug=False)

            trs = sse_sim.generate()

            sim_batches.append(trs)

            # printing progress
            pjh.print_progress(i , n_batches)


        # "expectations" from diversitree
        n1_ci_width_maxt_divtree = [
            7.61469739677451, 11.3985221565576, 8.65236794353448, 10.2719102405688, 8.82729473870905, 7.70410967867216, 9.19737917311999, 7.65009915182328, 11.3995816970925, 9.63261816961599, 9.97532174919687, 8.81487721488708, 10.6127667839497, 9.25557381626244, 8.55505148722618, 8.52496771180236, 8.57001653169557, 7.77857270862941, 9.0760256388115, 7.15316029941249, 10.3731219966787, 8.75694882511349, 10.0212869145957, 9.15229272426899, 8.17145835184636, 7.1925008330015, 7.35829067766215, 10.0924093088105, 9.51714075482078, 12.1101580591075, 7.72996876693417, 8.53009515027396, 7.75820360338108, 6.86971562506724, 7.52897407055912, 8.73244885412443, 7.43357805722986, 10.7427498156485, 8.47732093863183, 9.87844242415133, 8.34919938338008, 9.07318523059498, 7.0852982026022, 10.9373987128401, 7.04542104824621, 9.69906705591582, 9.27533777513403, 8.28162138724152, 8.183374671154, 7.42275229457825, 10.0578122764487, 10.6860425637531, 8.18308944607257, 8.78593095039168, 9.89143979420712, 9.51446425623809, 9.64454069681523, 8.91552490905838, 9.69933610607375, 7.98525740548914, 6.03309895730932, 8.95067512054456, 10.3671044425543, 6.99102857177062, 7.26507093961069, 9.58798159102837, 8.94412574097117, 7.79294226345969, 9.1445577265686, 8.47966721512065, 7.44395047275357, 7.44453454732145, 7.90833780121852, 7.87533376675413, 9.38851097549391, 9.82664274952889, 11.2284870606467, 8.21700091461033, 9.12816349670766, 7.14562163322776, 8.12917764315305, 7.34292766273794, 10.0978452654239, 10.5197246371766, 10.3216140621748, 8.85310148099112, 7.88410364521452, 10.7200694286912, 9.7131886061471, 10.0851927842233, 9.39527345867231, 8.70678031537502, 6.91329700174551, 8.88098493864301, 7.79608660710324, 8.35036678795209, 8.69793695274571, 10.236955535034, 8.64278402433574, 7.64048733587701
        ]

        n1_mean_maxt_divtree = [
            41.85, 61.05, 52.1, 56.09, 48.05, 43.57, 55.08, 48.31, 54.7, 54.23, 48.65, 49.41, 54.81, 55.18, 47.38, 45.69, 45.2, 46.38, 51.56, 48.11, 52.51, 41.49, 53.84, 48.87, 47.65, 43.09, 45.5, 51.8, 47.47, 55.96, 43.36, 48.65, 49.2, 45.82, 49.87, 44.45, 38.97, 56.53, 51.27, 47, 50, 54.39, 45.73, 56.83, 45.38, 57.67, 47.71, 48.23, 49.01, 44.66, 53.84, 52.92, 45.48, 50.74, 52.09, 55.06, 56.2, 45.5, 48.38, 45.02, 44.76, 47.69, 51.92, 44.14, 49, 52.95, 48.92, 45.09, 53.79, 48.24, 44.29, 45.3, 52.84, 42.49, 51.98, 54.62, 49.04, 49.09, 50.21, 46.4, 50.44, 44.52, 53.46, 51.42, 47.4, 51.79, 46.78, 61.34, 51.12, 54.95, 52.13, 49.22, 42.55, 48.53, 53.57, 46.24, 52.93, 55.95, 49.04, 50.56
        ]

        n2_ci_width_maxt_divtree = [
            7.86543478223139, 10.7037057757271, 7.75001553609391, 10.0482772865137, 9.67590376274271, 8.43811369212409, 9.31955418745603, 7.6927483597781, 11.3025300254484, 9.29364062306624, 9.41544995853178, 9.40119590234899, 9.67069448241031, 10.1166521116964, 8.53786688842386, 8.65730339110607, 9.34167726907732, 7.89741647657286, 8.99083241377156, 7.59152376490592, 9.61747014963872, 8.47350367670847, 10.5828067378225, 8.93082443864727, 7.85468723257751, 7.95373211466914, 6.91299642135132, 10.3637539188513, 9.2578425219711, 12.204334549808, 7.6979242748558, 8.64153039195903, 7.85319686777559, 7.10611412929639, 6.97785358749271, 9.08683607427844, 7.20986951887424, 11.1676130178098, 9.18034973775372, 8.55192461258832, 8.43517003441513, 9.01724890779059, 7.25113713130359, 10.4206445102833, 8.04153935220933, 9.69270369436034, 9.84071431060928, 8.01884533102044, 7.59853222392192, 6.93145464745294, 9.22874986992367, 9.24938360870659, 8.21480021336213, 8.82923070732849, 9.66104271930532, 9.11204638994585, 9.06621674498634, 8.76253061551735, 9.65159600003434, 7.86942866140673, 5.64418781051836, 8.31118137645445, 9.45872980568584, 6.62377136237432, 6.64063089068069, 9.07603333460764, 8.55654817176632, 7.69166074555076, 8.54410934547743, 7.96227309668933, 7.71305713866055, 7.1179538881577, 8.49921951744138, 8.07576773036146, 9.75057423465175, 9.28206252062373, 10.3589300703316, 8.43785432355019, 9.54283878869756, 7.11980500141554, 8.61420591236395, 8.43310702209219, 9.85239801777243, 9.94580761226568, 10.2791140262793, 8.10130363630921, 7.83586583423435, 10.2240823881855, 9.43259488841161, 9.31054369916931, 9.189959754498, 8.57058046108897, 7.03984064328364, 7.98626397922449, 7.7500613496692, 8.66730710724577, 8.80831563201111, 9.21878862692267, 8.41758235642947, 7.45113159044865
        ]

        n2_mean_maxt_divtree = [
            40.84, 59.7, 47.82, 56.31, 46.62, 43.71, 53.84, 44.73, 53.64, 53.34, 46.31, 50.41, 55.04, 53.88, 48.71, 43.78, 46.08, 46.71, 49.67, 46.44, 48.24, 40.52, 52.47, 45.44, 46.14, 44.64, 41.14, 50.42, 44.5, 54.97, 42.3, 47, 49.27, 46.01, 47.32, 41.56, 37.46, 55.34, 53.54, 43.23, 48.71, 51.14, 44.35, 55.62, 44.93, 55.33, 48.18, 45.74, 44.99, 44.29, 52.1, 47.62, 45.1, 48.54, 51.7, 51.99, 51.86, 44.7, 45.54, 44.19, 41.85, 45.23, 50.07, 42.66, 44.85, 52.3, 47.62, 43.21, 51.31, 46.08, 42.8, 41.99, 53.32, 41.59, 52.61, 51.59, 47.85, 48.63, 49.78, 44.47, 48.53, 44.53, 51.73, 50.62, 45.77, 50.18, 46.01, 58.02, 49.28, 52.46, 49.61, 48.47, 40.7, 45.19, 50.71, 46.89, 51.09, 50.84, 46.75, 46.76
        ]

        n3_ci_width_maxt_divtree = [
            0.555825735353094, 0.535903520639997, 0.537378626559364, 0.431015479344238, 0.45180169780714, 0.476220887548387, 0.419726510282998, 0.479206042018536, 0.422725071961253, 0.464840207583056, 0.607552099773669, 0.611752962618676, 0.531369663789682, 0.473077481001054, 0.577828248922225, 0.531541248245006, 0.501738190813907, 0.577962543262227, 0.400514697141394, 0.458853836017836, 0.648190363608367, 0.443440497414788, 0.444209889420064, 0.499785442449906, 0.455117663107825, 0.524811583698224, 0.51131800538047, 0.499804852422473, 0.472486534039315, 0.591208418359713, 0.559097333099334, 0.492074396937305, 0.466402798127338, 0.557926636500868, 0.607079281594599, 0.553429463719751, 0.459601647455092, 0.462815625309154, 0.52196460424133, 0.505989306390776, 0.442393555764342, 0.457180580550315, 0.521343476612167, 0.573690115908326, 0.479206042018536, 0.525077696607605, 0.420188509883819, 0.602263038610845, 0.533755921974102, 0.540751076622772, 0.487618454917118, 0.564536503906013, 0.466469352225477, 0.459191980713421, 0.489270891895855, 0.461657136319966, 0.397792654989552, 0.500673647209538, 0.493255849771022, 0.503035811725952, 0.535994023786976, 0.624108225528007, 0.463230464272702, 0.411675413966691, 0.430785843347112, 0.521551841366056, 0.546958526671803, 0.663736507291192, 0.626828677961651, 0.545235393146294, 0.617080164070187, 0.444908182106208, 0.596192091612267, 0.522113267636845, 0.536746418316655, 0.434315922812048, 0.609360109483959, 0.493535046395088, 0.670391315244728, 0.47283544620927, 0.443685448683792, 0.489702940257632, 0.565031187125315, 0.565954124564095, 0.405138507803258, 0.446166703455925, 0.528113662391005, 0.440807477617193, 0.53157044859377, 0.502391282173607, 0.510934615991305, 0.582693292505854, 0.836210982994608, 0.577935686890694, 0.495606391558397, 0.486666560398494, 0.585748619160545, 0.392672554362404, 0.543324707126169, 0.5411205119794
        ]

        n3_mean_maxt_divtree = [
            11.12, 15.51, 13.75, 14.93, 12.76, 11.57, 16.1, 11.6, 14.46, 14.37, 12.83, 13.68, 14.49, 14.43, 13.18, 12.8, 12.3, 13.29, 13.01, 12.42, 13.35, 10.9, 14.5, 12.24, 12.42, 11.3, 11.77, 13.19, 11.88, 14.62, 11.1, 12.43, 12.96, 11.95, 12.68, 11.46, 10.25, 15.62, 13.46, 12.01, 13.59, 13.82, 11.96, 14.91, 12.2, 14.76, 12.72, 12.48, 11.63, 11.14, 14.36, 13.87, 11.93, 13.04, 14.41, 13.94, 14.8, 11.87, 12.23, 12.54, 11.98, 12.74, 13.32, 11.58, 12.97, 13.72, 12.7, 11.71, 14.07, 13.06, 11.37, 11.35, 14.2, 11.25, 13.25, 14.22, 12.8, 13.08, 14.08, 12.51, 13.58, 12.66, 14.23, 14.13, 12.95, 13.61, 12.11, 15.11, 13.16, 13.77, 13, 13.26, 10.63, 12.77, 13.61, 11.7, 13.9, 13.87, 12.57, 13.29
        ]

        root_ages_ci_width_maxt_divtree = [
            0.0863621436610369, 0.0683344476938087, 0.0764824383260808, 0.0782119002487626, 0.0953901974093536, 0.0828971839834432, 0.0779879908824513, 0.0993078674559366, 0.0964958695619792, 0.0879013012005711, 0.100410281284171, 0.0602099333156964, 0.0627084069830292, 0.0785843068183554, 0.0942952792553635, 0.0869292276344587, 0.0982118725073612, 0.0682497208139858, 0.0678699587739283, 0.0843821450863513, 0.077526933961665, 0.061975429232225, 0.0821942621664972, 0.0971370045704151, 0.0689002363196737, 0.0650862067994434, 0.0710002446906274, 0.110022693716635, 0.0694915820374534, 0.0824715109678761, 0.0810296381623433, 0.0837232755213046, 0.0723647316366736, 0.0863664240763528, 0.0699901475457904, 0.105287588080782, 0.0992796186000226, 0.0814778947653661, 0.0741412029585709, 0.0918229670804907, 0.0814542643144918, 0.0836989354406395, 0.0885605828327472, 0.0802974535163125, 0.0736579950207639, 0.0835150416704483, 0.0859738537095798, 0.0646280878667954, 0.0956631951634727, 0.0656745072776782, 0.0721009457132847, 0.0851020965959267, 0.116276753024932, 0.0754299235710839, 0.078579106169794, 0.0809213516248445, 0.0833969439461317, 0.0786993782768009, 0.081016820640823, 0.0849973399851797, 0.0869738134809529, 0.0848249919742559, 0.0618016950730631, 0.0851971655532165, 0.0754477438432816, 0.0629650954964614, 0.084267636293506, 0.0822303530341302, 0.0786002952327918, 0.0786810829708018, 0.0780211398402472, 0.0795046173750614, 0.0809231134676522, 0.0694291278413427, 0.0862414262233601, 0.074479722758591, 0.0949697676361586, 0.0652331364130727, 0.0876214151851634, 0.0767873923262017, 0.0811177805127541, 0.061941982651136, 0.0759781687997605, 0.0851475507141673, 0.0828628602570979, 0.0883212418535365, 0.0705176195001626, 0.0606045718160437, 0.0618065154283371, 0.0596878566675811, 0.0710418631483221, 0.0873721022509251, 0.0879411359850104, 0.0846850291250342, 0.0787465611609875, 0.0795017393876372, 0.0863436018914586, 0.0804853967955438, 0.076684316999975, 0.067626116341724
        ]

        root_ages_mean_maxt_divtree = [
            3.50277554651025, 3.59861897156149, 3.55816380865796, 3.52959903544372, 3.51136655797538, 3.47423369407496, 3.52999625188782, 3.55495963518541, 3.54947430506743, 3.54582114303298, 3.49687058713685, 3.64592548954201, 3.62351543644644, 3.5741000772744, 3.48021231352758, 3.54587651094397, 3.50369749483071, 3.57583364060204, 3.62958195248726, 3.5387255728763, 3.53907263016699, 3.5844916129234, 3.51741852548453, 3.50284518908845, 3.58097277731293, 3.59273196624833, 3.57231299558864, 3.49064833503716, 3.5701524209432, 3.50677622091431, 3.57708908296371, 3.50381117773857, 3.52894600681898, 3.5873270084788, 3.63429872627754, 3.49368119662322, 3.43607406780903, 3.56375148175194, 3.58025237571096, 3.53065908927687, 3.59176041885477, 3.58390297784463, 3.51538118479266, 3.55934214586894, 3.63296561318448, 3.55327029199147, 3.54130857912747, 3.57809544981563, 3.52429848949143, 3.56480820074316, 3.56102577967363, 3.51463200814148, 3.48802339469853, 3.5664830497503, 3.54188648014971, 3.54999977432845, 3.53534355838466, 3.56482634976622, 3.55717290844079, 3.56977340393873, 3.51868619417851, 3.50237316170494, 3.62943438217033, 3.51958316584184, 3.53822377005109, 3.61140242193596, 3.53375679542984, 3.55369676402664, 3.62394340710736, 3.52869683509773, 3.55905119814178, 3.59428125478635, 3.5388665381499, 3.53918703396336, 3.55345431040883, 3.56585687239169, 3.51704499377328, 3.58815572523115, 3.51476736659786, 3.54001980130828, 3.58141071029781, 3.5850687855442, 3.56391570702091, 3.52464147005821, 3.5149348452404, 3.54210361161907, 3.5672857719015, 3.61493644562914, 3.64691740182515, 3.64988404345597, 3.58205575470221, 3.47931868027422, 3.49456699746901, 3.50365276356308, 3.59532019717527, 3.54200778846066, 3.61111175136063, 3.59293906165868, 3.57808474027827, 3.60271391529931
        ]

        
        # parsing simulations
        n1_ci_overlap_count = 0
        n2_ci_overlap_count = 0
        n3_ci_overlap_count = 0
        root_age_ci_overlap_count = 0
        for i, batch in enumerate(sim_batches):
            # note that we're matching diversitree's state coding:
            # 0=AB, 1=A, 2=B
            n3s = [ann_tr.state_count_dict[0] for ann_tr in batch]
            n1s = [ann_tr.state_count_dict[1] for ann_tr in batch]
            n2s = [ann_tr.state_count_dict[2] for ann_tr in batch]
            root_ages = [ann_tr.root_age for ann_tr in batch]
            
            mean_n1 = statistics.mean(n1s)
            mean_n2 = statistics.mean(n2s)
            mean_n3 = statistics.mean(n3s)
            mean_root_ages = statistics.mean(root_ages)

            # debugging
            # print("batch " + str(i) + ", tree = ")
            # print(batch[0].tree.as_string(schema="newick", suppress_annotations=False))
            print("PJ's vs. diversitree mean state 0 count: " + str(mean_n1) + " <-> " + str(n1_mean_maxt_divtree[i]))
            print("PJ's vs. diversitree mean state 1 count: " + str(mean_n2) + " <-> " + str(n2_mean_maxt_divtree[i]))
            print("PJ's vs. diversitree mean state 2 count: " + str(mean_n3) + " <-> " + str(n3_mean_maxt_divtree[i]))
            print("PJ's vs. diversitree mean root age: " + str(mean_root_ages) + " <-> " + str(root_ages_mean_maxt_divtree[i]))
            
            stdevs_n1 = statistics.stdev(n1s)
            stdevs_n2 = statistics.stdev(n2s)
            stdevs_n3 = statistics.stdev(n3s)
            stdevs_root_ages = statistics.stdev(root_ages)
            
            sterr_n1 = stdevs_n1 / math.sqrt(n_sim)
            sterr_n2 = stdevs_n2 / math.sqrt(n_sim)
            sterr_n3 = stdevs_n3 / math.sqrt(n_sim)
            sterr_root_ages = stdevs_root_ages / math.sqrt(n_sim)
            
            n1_ci_width_maxt = 1.96 * sterr_n1
            n2_ci_width_maxt = 1.96 * sterr_n2
            n3_ci_width_maxt = 1.96 * sterr_n3
            root_ages_ci_width_maxtaxa = 1.96 * sterr_root_ages

            if abs(mean_n1 - n1_mean_maxt_divtree[i]) <= (n1_ci_width_maxt + n1_ci_width_maxt_divtree[i]):
                n1_ci_overlap_count += 1

            if abs(mean_n2 - n2_mean_maxt_divtree[i]) <= (n2_ci_width_maxt + n2_ci_width_maxt_divtree[i]):
                n2_ci_overlap_count += 1

            if abs(mean_n3 - n3_mean_maxt_divtree[i]) <= (n3_ci_width_maxt + n3_ci_width_maxt_divtree[i]):
                n3_ci_overlap_count += 1

            if abs(mean_root_ages - root_ages_mean_maxt_divtree[i]) <= (root_ages_ci_width_maxtaxa + root_ages_ci_width_maxt_divtree[i]):
                root_age_ci_overlap_count += 1

        # [==== * ====][.... + ....] if we take '+' to be the "truth" of the '*' interval, + cannot be more than '====' away from '*' 95% of the time
        # then abs('+' - '*') can be at most ('====' + '....'). '....' can be added because we still are guaranteed to see '+' falling within that range
        # 95% of the time
    
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n1_ci_overlap_count) + " times for state 1 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n2_ci_overlap_count) + " times for state 2 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n3_ci_overlap_count) + " times for state 3 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(root_age_ci_overlap_count) + " times for root age.")
        exp_count = int(0.95 * n_batches)
        a_delta = math.ceil(0.07 * exp_count)
        # self.assertAlmostEqual(n3_ci_overlap_count, exp_count,
        #                         msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        # self.assertAlmostEqual(n2_ci_overlap_count, exp_count,
        #                         msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        # self.assertAlmostEqual(n1_ci_overlap_count, exp_count,
        #                         msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        # self.assertAlmostEqual(root_age_ci_overlap_count, exp_count,
        #                         msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
    
if __name__ == '__main__':
    # Assuming you opened the PhyloJunction/ (repo root) folder
    # on VSCode and that you want to run this as a standalone script,
    # i.e., "Run Without Debugging", you will need to configure your
    # launch.json to have:
    # 
    # "env": {"PYTHONPATH": "${workspaceRoot}/src/phylojunction/"}
    # 
    # and your settings.json to have:
    #   
    # "python.analysis.extraPaths": [ "${workspaceFolder}/src/phylojunction/" ]
    # 
    # If you want to run this as a standalone from PhyloJunction/
    # on the terminal, remember to add "src/" to
    # PYTHONPATH (system variable), or to set it if it does not
    # exist -- don't forget to export it!
    # 
    # Then you can do:
    # $ python3.9 tests/distribution/test_dn_discrete_sse_geosse.py
    # 
    # or
    #
    # $ python3.9 -m tests.distribution.test_dn_discrete_sse_geosse
    #
    # or 
    #
    # $ python3.9 -m unittest tests.distribution.test_dn_discrete_sse_geosse.TestGeoSSETrees.test_tree_size_state_count_max_t_geosse

    unittest.main()