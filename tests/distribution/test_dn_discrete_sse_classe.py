import unittest
import math
import statistics

# pj imports
import utility.helper_functions as pjh
import calculation.discrete_sse as sseobj
import distribution.dn_discrete_sse as distsse

__author__ = "Fabio K. Mendes"
__email__ = "f.mendes@wustl.edu"

class TestClaSSETrees(unittest.TestCase):

    @classmethod
    def setUpClass(cls):
        total_n_states = 3

        # calling state 0 "1" to match R unit test
        rates_t0_s1 = [ sseobj.AtomicSSERateParameter(name="lambda1", val=0.9, event=sseobj.MacroevolEvent.W_SPECIATION, states=[0,0,0]),
                        sseobj.AtomicSSERateParameter(name="mu1", val=0.6, event=sseobj.MacroevolEvent.EXTINCTION, states=[0]),
                        sseobj.AtomicSSERateParameter(name="q13", val=0.9, event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION, states=[0,2]) ]
        
        rates_t0_s2 = [ sseobj.AtomicSSERateParameter(name="lambda2", val=0.7, event=sseobj.MacroevolEvent.W_SPECIATION, states=[1,1,1]),
                        sseobj.AtomicSSERateParameter(name="mu2", val=0.4, event=sseobj.MacroevolEvent.EXTINCTION, states=[1]),
                        sseobj.AtomicSSERateParameter(name="q23", val=0.4, event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION, states=[1,2]) ]
        
        rates_t0_s3 = [ sseobj.AtomicSSERateParameter(name="lambda312", val=1.2, event=sseobj.MacroevolEvent.BW_SPECIATION, states=[2,0,1]),
                        sseobj.AtomicSSERateParameter(name="lambda313", val=0.9, event=sseobj.MacroevolEvent.BW_SPECIATION, states=[2,0,2]),
                        sseobj.AtomicSSERateParameter(name="lambda323", val=0.7, event=sseobj.MacroevolEvent.BW_SPECIATION, states=[2,1,2]),
                        sseobj.AtomicSSERateParameter(name="q31", val=0.4, event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION, states=[2,0]),
                        sseobj.AtomicSSERateParameter(name="q32", val=0.6, event=sseobj.MacroevolEvent.ANAGENETIC_TRANSITION, states=[2,1]) ]
        
        rates_t0 = rates_t0_s1 + rates_t0_s2 + rates_t0_s3

        # original implementation
        # matrix_atomic_rate_params = [ [ rates_t0_s1, rates_t0_s2, rates_t0_s3 ] ] # 1D: time slices, 2D: states, 3D: parameters of state, several parameters -> matrix
        matrix_atomic_rate_params = [ rates_t0 ]

        fig_rates_manager = sseobj.FIGRatesManager(matrix_atomic_rate_params, total_n_states)
        
        cls.event_handler = sseobj.MacroEvolEventHandler(fig_rates_manager)


    def test_tree_size_state_count_max_taxa_classe(self):
        """
        Test if ClaSSE (GeoSSE) trees simulated here have similar root ages and number of tips for the three states 
        (A, B, AB) as ClaSSE trees simulated with diversitree
        """
        
        stop_condition = "size"
        stop_condition_value = 50 # 50 living taxa

        start_at_origin = True

        # simulation initialization
        n_batches = i = 100
        n_sim = 100
        start_states_list = [0 for i in range(n_sim)]
        # seeds_list = [i+1 for i in range(n_sim)]
    
        # simulations
        sim_batches = list()
        for i in range(n_batches):
            # print("Doing batch " + str(n_batches - i))
            sse_sim = distsse.DnSSE(self.event_handler, stop_condition_value, n=n_sim, stop=stop_condition, origin=start_at_origin,
                start_states_list=start_states_list, epsilon=1e-12, runtime_limit=3600,
                condition_on_speciation=True, condition_on_survival=True,
                debug=False)

            trs = sse_sim.generate()

            sim_batches.append(trs)

            # printing progress
            pjh.print_progress(i , n_batches)


        # "expectations" from diversitree
        n1_ci_width_maxtaxa_divtree = [
            0.845670055215483,  0.82415137397924,  0.86971646161005, 0.823180694359935, 0.723409207087438, 0.916709329616669, 0.885378528639568,  1.00016788539936, 0.910452489837723, 0.940228201278861,
            0.814646536491298, 0.747811814162968, 0.662399224144883, 0.926803374174923, 0.725573468370182,  1.01233545330115, 0.787478557442279, 0.942311810689166, 0.930994455185037, 0.853197739343988,
            0.859431436851614, 0.870523953179163, 0.850426852424887, 0.838601130649001, 0.839821223067613, 0.840031936743922, 0.830522268528567, 0.886504217865983, 0.871662263221023, 0.783321284062157,
            0.805364022005878, 0.888848467621773, 0.916793570958517,  1.01108424695636, 0.743782173467896, 0.937370254964786, 0.862660890911968, 0.895749756024561, 0.870400504746227,  0.87798678386725,
            0.784924489123107, 0.963349532396538, 0.853608640328443, 0.840713223779477, 0.726704438051225, 0.878746239841019,  0.80715602980805, 0.947179027324783, 0.812978131769264, 0.750923844079973,
            0.902442875286682, 0.846198107795684,  0.73158724031798, 0.672294649788135, 0.698126998462963, 0.851102709704449, 0.948420987307806, 0.958197953309102, 0.795894533881059,  0.75535359708864,
            0.922490507152216, 0.769845411169723, 0.770138240710018, 0.767755298094913, 0.654434373074668, 0.936857638099186, 0.798204587974363, 0.888911665721832, 0.787639026429656, 0.889826811152684,
             0.87142588938738, 0.696617963943005, 0.870840306619002, 0.951861887245601, 0.762200341566284, 0.834923922016584, 0.813272557439475, 0.857521235692109, 0.906236517211529, 0.796973076763882,
            0.894523166376738, 0.715372544120184, 0.898160807403138, 0.713526390620809, 0.827677106208175, 0.943935413149401, 0.807009410252008,  0.80949355531218, 0.755958180745605, 0.780445117826872,
            0.765570477208582, 0.797583629838492, 0.848675879660751, 0.894438242185254,  0.81081699069831, 0.867766858687952, 0.790233339985052, 0.851306900081921, 0.832360440552665, 0.832038553245789
            ]

        n1_mean_maxtaxa_divtree = [
            15.9885057471264,  16.438202247191,             16.8, 16.4943820224719, 16.5333333333333, 16.1111111111111, 15.9090909090909, 16.2298850574713, 15.6279069767442, 16.2584269662921,
            15.4712643678161, 16.2747252747253, 15.1162790697674,  16.876404494382, 15.7325581395349, 15.9659090909091, 16.3764705882353, 15.8222222222222, 15.6413043478261, 16.0860215053763,
            16.7826086956522, 16.1222222222222, 16.4285714285714, 16.0744680851064, 16.5977011494253, 16.0786516853933, 16.2105263157895, 16.4943820224719, 15.8314606741573, 15.9318181818182,
            15.9659090909091, 16.1904761904762, 16.1264367816092, 16.5730337078652, 16.2941176470588, 15.6292134831461, 15.5434782608696, 15.7173913043478, 16.5568181818182, 16.0449438202247, 
             5.4418604651163, 15.9058823529412, 16.1428571428571, 15.6666666666667, 16.7011494252874, 15.8876404494382, 16.6206896551724, 16.1647058823529, 16.5604395604396, 15.9882352941176,
            16.3636363636364, 17.3218390804598, 15.8588235294118, 15.9318181818182,  16.043956043956,  16.063829787234, 16.7682926829268, 16.0326086956522, 15.8965517241379, 15.9186046511628,
            15.9565217391304, 16.5842696629213, 17.0352941176471,             16.4, 16.4148936170213, 15.8068181818182, 15.9659090909091, 16.7228915662651, 16.1460674157303, 15.2967032967033,
            15.7303370786517, 16.7093023255814,  16.685393258427,  15.468085106383, 16.3626373626374, 15.8571428571429, 16.4555555555556, 16.0666666666667, 16.0898876404494, 16.2043010752688,
            16.2688172043011, 15.8604651162791, 15.9666666666667, 16.5056179775281, 15.9310344827586, 15.8641975308642, 16.1058823529412,             16.5, 16.0222222222222, 16.4565217391304,
            16.1034482758621, 16.5833333333333, 16.6923076923077, 16.6976744186047,           15.525, 16.1609195402299,  15.989010989011,  15.554347826087, 15.5531914893617, 16.1789473684211
            ]

        n2_ci_width_maxtaxa_divtree = [
            0.921196154166246, 0.908123515108239, 0.954388426383347, 0.853856047078058,  0.88352801472788, 0.942161655062263,  1.01252626525268,  1.06559136189629, 0.956264969661894,  1.01589492793129,
            0.913781180577173, 0.887324668126986, 0.794824589136861, 0.969012253638589, 0.876301793862211, 0.991622976479324, 0.896223869091541, 0.953543816893896,  1.01259894764045, 0.933199574333002,
             0.92820306854419, 0.878986473430853,  0.88639955816033, 0.952731729231151, 0.895149974367721, 0.983168117096967, 0.972287682255653,  0.90871745873849,  1.04137283869545, 0.870192943930035,
             0.87176283527192,  0.99777455180261, 0.968733743618507,  1.03498040819737, 0.854104847308618,  1.02835747730232, 0.994794350271001, 0.999451441515038, 0.954959932305696,  1.04598327385913,
            0.849130495965848,  1.00876909657071, 0.902636753314275, 0.926972156115877, 0.802837968081886, 0.978657712002778, 0.961610624308342,  1.02276871439112, 0.979679263753735, 0.848448105799815,
             1.05537582385214, 0.948260135273345, 0.919099064408227, 0.759646571288673, 0.770031110482629, 0.992066415183239, 0.940582713540783,  1.01378325178775, 0.862889491955634, 0.834765000639551,
             0.94651869790562, 0.803746721701281, 0.807082744743527, 0.899054780104063, 0.802866843351835,  1.03638917822198, 0.882423734275635, 0.961357324809732, 0.862992674050458,  1.02439281995368,
             0.97401060456963, 0.786743489799216, 0.911934205913013,  1.02843105601248, 0.800811212640406, 0.913542899408577,  0.95533269926876, 0.924889315913875, 0.904974526021424, 0.847177253986876,
            0.854018293935681, 0.825264533802583, 0.929087812209645, 0.805660682826779,  1.01138858391937,  1.00103184789188, 0.945080621107087, 0.870077610970313, 0.936983185621454, 0.912578441215459,
            0.893944631998457, 0.859154828933831, 0.918892800868077, 0.927360840552895, 0.955313110577106,  1.00644709452432, 0.827429590053272, 0.902422788737135, 0.840433191130113, 0.909025230358812
            ]

        n2_mean_maxtaxa_divtree = [
            25.4827586206897, 25.1797752808989, 24.5555555555556, 24.8988764044944, 24.8333333333333, 25.1666666666667, 25.8409090909091, 25.3563218390805,  25.546511627907, 25.5393258426966,
            26.0919540229885, 25.2857142857143,  26.046511627907, 24.7865168539326, 25.5697674418605, 26.2159090909091, 24.8588235294118, 25.5111111111111, 25.6521739130435, 25.3655913978495,
            24.6521739130435, 25.0222222222222, 25.3690476190476, 25.3510638297872, 24.9540229885057, 25.4943820224719, 25.5789473684211, 25.0674157303371, 25.4719101123596, 25.2159090909091,
            25.1818181818182, 25.1904761904762, 25.2183908045977, 24.5730337078652, 24.5411764705882, 26.1685393258427, 25.2717391304348, 25.7717391304348, 25.0909090909091, 25.5168539325843,
            26.2325581395349, 25.5411764705882, 25.1785714285714, 26.0430107526882,  24.735632183908, 25.2808988764045, 24.8965517241379, 25.2352941176471, 24.5494505494506, 25.3058823529412,
            24.8295454545455, 23.6781609195402, 25.4588235294118, 25.6136363636364, 25.1428571428571, 24.8404255319149, 24.6951219512195, 25.1630434782609, 25.1149425287356, 25.6395348837209,
            24.7282608695652, 24.9550561797753, 24.1411764705882, 24.7555555555556, 24.9255319148936,            25.75, 25.3295454545455, 24.4939759036145, 25.5505617977528, 25.9230769230769,
             25.685393258427, 24.3488372093023, 24.6179775280899, 26.0744680851064, 25.1318681318681, 25.1758241758242, 24.8666666666667, 24.8111111111111, 24.7640449438202, 25.7634408602151,
            25.6666666666667, 25.5813953488372, 26.1555555555556, 25.1123595505618, 25.2413793103448, 25.1234567901235, 25.1529411764706, 24.8295454545455, 25.4222222222222, 24.7608695652174,
            25.3218390804598,  24.547619047619, 24.7692307692308, 24.7325581395349,           26.125, 24.8735632183908,  25.021978021978, 26.2934782608696, 25.8191489361702, 25.1473684210526
            ]

        n3_ci_width_maxtaxa_divtree = [
            0.460960224156572, 0.556341291185397, 0.574492715054279,   0.5906799668933, 0.573845361466314, 0.544970282894813, 0.498376675161296, 0.540955808591086, 0.496930306668211, 0.483885651574621,
            0.548458969153294, 0.548339978137589, 0.467567211347441, 0.504869780639991, 0.551158270981832,   0.4541477348829, 0.464261251671859, 0.505500886317142, 0.522652522105152,  0.51331970741404, 
            0.418364261760484, 0.442250923854815, 0.529414027818876, 0.464789819978763, 0.426657947318016, 0.576671081520039,  0.58163709184245, 0.508326341094037, 0.575547230827477, 0.471318812692101,
            0.545167103119703,  0.48480539713618, 0.545294982080302, 0.513959283451486, 0.524571040442177, 0.569274702965238, 0.503222272478469, 0.487512078574319, 0.521572686090494, 0.446122726648026,
            0.510611686500852, 0.522525961452785, 0.571765854848892, 0.471836423030457, 0.500776498360107, 0.575419381633917, 0.533732038886933, 0.503533117083673, 0.539109312924616, 0.480883826825108,
            0.566862045732797, 0.547887613666619, 0.597422542358126, 0.461251761018689, 0.487083628895964, 0.589802088649133, 0.444389546745024, 0.606893774487517, 0.440804212679581, 0.486277680998147,
             0.53335920366464,  0.51012757322082, 0.565137220886549, 0.496811434045908, 0.497469627413613, 0.460244392395445, 0.562405335817047, 0.514074194452797, 0.508712167594438, 0.516755029664696,
            0.506479967125138,  0.59324527769509, 0.484989293606752, 0.490033629594082, 0.471463754486887, 0.560078968791055, 0.448325521561505, 0.505353806666784, 0.522384010223202, 0.469948497670578,
            0.496187303457275, 0.493656996401104, 0.529544725193279, 0.514769847518479, 0.469950520352719, 0.574361795042931,  0.50530376032252, 0.538797482615432, 0.537861526067324, 0.492964277878442,
             0.49352641778002, 0.539803162101947, 0.451043932516367, 0.513347203725887, 0.488235303304058, 0.504107891864366, 0.432874139344014, 0.463943313340446, 0.483515686299087, 0.511778374485739
            ]

        n3_mean_maxtaxa_divtree = [
            8.52873563218391, 8.38202247191011, 8.64444444444444, 8.60674157303371, 8.63333333333333, 8.72222222222222,             8.25, 8.41379310344828, 8.82558139534884, 8.20224719101124,
             8.4367816091954, 8.43956043956044, 8.83720930232558, 8.33707865168539, 8.69767441860465, 7.81818181818182, 8.76470588235294, 8.66666666666667, 8.70652173913044, 8.54838709677419,
            8.56521739130435, 8.85555555555556, 8.20238095238095, 8.57446808510638, 8.44827586206897, 8.42696629213483, 8.21052631578947, 8.43820224719101, 8.69662921348315, 8.85227272727273,
            8.85227272727273, 8.61904761904762,  8.6551724137931, 8.85393258426966, 9.16470588235294, 8.20224719101124, 9.18478260869565, 8.51086956521739, 8.35227272727273, 8.43820224719101,
            8.32558139534884, 8.55294117647059, 8.67857142857143, 8.29032258064516,  8.5632183908046,  8.8314606741573, 8.48275862068965,              8.6, 8.89010989010989, 8.70588235294118,
            8.80681818181818,              9.0, 8.68235294117647, 8.45454545454546, 8.81318681318681, 9.09574468085106, 8.53658536585366, 8.80434782608696, 8.98850574712644, 8.44186046511628,
            9.31521739130435, 8.46067415730337, 8.82352941176471, 8.84444444444444, 8.65957446808511, 8.44318181818182, 8.70454545454546, 8.78313253012048, 8.30337078651685, 8.78021978021978,
            8.58426966292135, 8.94186046511628, 8.69662921348315, 8.45744680851064, 8.50549450549451, 8.96703296703297, 8.67777777777778, 9.12222222222222, 9.14606741573034, 8.03225806451613,
            8.06451612903226, 8.55813953488372, 7.87777777777778, 8.38202247191011, 8.82758620689655, 9.01234567901234, 8.74117647058823, 8.67045454545454, 8.55555555555556, 8.78260869565217,
            8.57471264367816, 8.86904761904762, 8.53846153846154, 8.56976744186047,             8.35, 8.96551724137931, 8.98901098901099, 8.15217391304348, 8.62765957446809, 8.67368421052632
            ]

        root_ages_ci_width_maxtaxa_divtree = [
            0.417436198451906, 0.301796893272657, 0.337968999892175,   0.3381997694074,  0.30507379515496, 0.314939857096379, 0.331617725197249, 0.276846154204991, 0.479758975979745, 0.255071894145758,
             0.27031451586731, 0.352302309238795, 0.286205048792579, 0.371034720763752, 0.289619830867505, 0.368537355700079, 0.290139019208662, 0.222972870468703,  0.37407829059162, 0.322781667811825,
            0.278296906548143, 0.321982471672722, 0.249013054455631, 0.335109515187232, 0.304423376877719, 0.341100493129529, 0.279888953235086, 0.320140216543192, 0.282484319862559, 0.321445378459495,
            0.403391386198734, 0.323395999407973, 0.327765974920883, 0.320966227685805, 0.309112518988143, 0.279755359556342, 0.293276407785983, 0.310438177965122,  0.23434644708895, 0.296221940221326,
            0.295201786192299, 0.283358256339573, 0.332237712141521, 0.295126810972789, 0.307743615547855, 0.283425516830125, 0.296245130341046, 0.304485782728284, 0.296196096742527, 0.335221989221445,
            0.270283953547982, 0.303860383894882, 0.429458909143805, 0.365897353405735, 0.294834841783512, 0.318367111867029, 0.292337180635938,  0.32645590618447, 0.331979871974766,  0.31752528895818,
            0.338563414767747, 0.258490295046476, 0.359930256380764, 0.338623217741029, 0.279651500052396,  0.29608820664713,  0.35178343312329, 0.357545599236597, 0.294650934050873, 0.354838827947183,
            0.290205240656443, 0.261118260276024, 0.278886327059919, 0.280570152619707,  0.33671553077189, 0.300994414121575, 0.256181661176664, 0.336125861687424, 0.287535796392072, 0.303804749290355,
            0.323616779601911, 0.300727209554269, 0.285173489791598, 0.298127696517124, 0.451858496258256, 0.332955495946141, 0.310870294218263,  0.27528862256521, 0.353030799369267,  0.28080396793014,
            0.250058560727002,   0.3585325779513, 0.270734284074931, 0.338150149648284, 0.278951820418272, 0.266499380015149, 0.287817904145451, 0.331980389542652,  0.29687828077525, 0.302574016084445
            ]

        root_ages_mean_maxtaxa_divtree = [
            5.09528334068309, 4.82640809798559,  4.8780566261551, 4.94587140664511, 4.94189786492106, 4.79488270137212,  4.9306672415453, 4.73123295099218, 5.14298009570584, 4.73348035452538,
            4.80868944761845, 4.95611183343548,  4.7336896455281, 5.00425638554836, 4.74971242793566, 4.87425125808979, 4.72823874077876,  4.4822302599001, 4.83635126366466, 4.97825579351093,
            4.65042179782752, 4.96678077419722, 4.64681867142471, 4.95556959703322, 4.68722636444994, 4.75121361778477, 4.78616884963088, 4.65599660069273, 4.79667277125288, 4.70169642814651,
            4.95478628433015, 5.08243682174215, 4.87361761260542, 4.76998615019712, 4.66236268300007, 4.68407427889844, 4.97497980270331, 4.91779865790778, 4.50608913471993, 4.70941888870188,
            5.06316722871908, 4.55758896936762, 5.14736454677758,  5.0684270403795, 4.78902905374275,  4.5607778803653, 4.76620900715417, 4.83042851623741, 4.68850456779094, 4.80215489002865,
            4.77743441264956,  4.9973155573818, 5.05895609324092, 5.07811091766919, 5.00122702111681, 4.72453447411928, 4.88095061343876, 4.76583569186564, 4.90102632333593, 4.97777007807801,
            5.10134485872275, 4.69084642501811, 5.07572260285823, 4.92570457320105, 4.67188147823514, 4.75488062223496, 4.92052136134807, 5.03479319414288, 4.66463188251353, 5.08711174032095,
            4.81000971240954, 4.54703437961473, 4.50694665581351, 4.76857681417102, 4.92850019924552, 4.96151465881009, 4.65019941242924, 4.92796907642255,  4.6964271926101, 4.98817739121902,
            4.81092524779525, 4.75660636316239, 4.82304906353214, 4.91352747118085, 5.29308141254654, 4.88915346959637, 4.93149058820877, 4.77041784686998, 4.75634025964024, 4.72035034829855,
            4.58264303919533, 5.09656866911436, 4.73637330787319, 5.05913685516497, 4.92674704181968, 4.74573555879288, 4.77247164426675, 4.93781527590847, 4.97364536966686, 4.64542126833156
            ]

        
        # parsing simulations
        n1_ci_overlap_count = 0
        n2_ci_overlap_count = 0
        n3_ci_overlap_count = 0
        root_age_ci_overlap_count = 0
        for i, batch in enumerate(sim_batches):
            n1s = [ann_tr.state_count_dict[0] for ann_tr in batch]
            n2s = [ann_tr.state_count_dict[1] for ann_tr in batch]
            n3s = [ann_tr.state_count_dict[2] for ann_tr in batch]
            root_ages = [ann_tr.root_age for ann_tr in batch]
            
            mean_n1 = statistics.mean(n1s)
            mean_n2 = statistics.mean(n2s)
            mean_n3 = statistics.mean(n3s)
            mean_root_ages = statistics.mean(root_ages)
            
            stdevs_n1 = statistics.stdev(n1s)
            stdevs_n2 = statistics.stdev(n2s)
            stdevs_n3 = statistics.stdev(n3s)
            stdevs_root_ages = statistics.stdev(root_ages)
            
            sterr_n1 = stdevs_n1 / math.sqrt(n_sim)
            sterr_n2 = stdevs_n2 / math.sqrt(n_sim)
            sterr_n3 = stdevs_n3 / math.sqrt(n_sim)
            sterr_root_ages = stdevs_root_ages / math.sqrt(n_sim)
            
            n1_ci_width_maxtaxa = 1.96 * sterr_n1
            n2_ci_width_maxtaxa = 1.96 * sterr_n2
            n3_ci_width_maxtaxa = 1.96 * sterr_n3
            root_ages_ci_width_maxtaxa = 1.96 * sterr_root_ages

            if abs(mean_n1 - n1_mean_maxtaxa_divtree[i]) <= (n1_ci_width_maxtaxa + n1_ci_width_maxtaxa_divtree[i]):
                n1_ci_overlap_count += 1

            if abs(mean_n2 - n2_mean_maxtaxa_divtree[i]) <= (n2_ci_width_maxtaxa + n2_ci_width_maxtaxa_divtree[i]):
                n2_ci_overlap_count += 1

            if abs(mean_n3 - n3_mean_maxtaxa_divtree[i]) <= (n3_ci_width_maxtaxa + n3_ci_width_maxtaxa_divtree[i]):
                n3_ci_overlap_count += 1

            if abs(mean_root_ages - root_ages_mean_maxtaxa_divtree[i]) <= (root_ages_ci_width_maxtaxa + root_ages_ci_width_maxtaxa_divtree[i]):
                root_age_ci_overlap_count += 1

        # [==== * ====][.... + ....] if we take '+' to be the "truth" of the '*' interval, + cannot be more than '====' away from '*' 95% of the time
        # then abs('+' - '*') can be at most ('====' + '....'). '....' can be added because we still are guaranteed to see '+' falling within that range
        # 95% of the time
    
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n1_ci_overlap_count) + " times for state 1 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n2_ci_overlap_count) + " times for state 2 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n3_ci_overlap_count) + " times for state 3 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(root_age_ci_overlap_count) + " times for root age.")
        exp_count = int(0.95 * n_batches)
        a_delta = math.ceil(0.07 * exp_count)
        self.assertAlmostEqual(n3_ci_overlap_count, exp_count,
                                msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        self.assertAlmostEqual(n2_ci_overlap_count, exp_count,
                                msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        self.assertAlmostEqual(n1_ci_overlap_count, exp_count,
                                msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        self.assertAlmostEqual(root_age_ci_overlap_count, exp_count,
                                msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)


    def test_tree_size_state_count_max_t_classe(self):
        """
        Test if ClaSSE (GeoSSE) trees simulated here have similar root ages and number of tips for the three states 
        (A, B, AB) as ClaSSE trees simulated with diversitree
        """

        stop_condition = "age"
        stop_condition_value = 3.0 # 3.0 time units
        
        start_at_origin = True

        # simulation initialization
        n_batches = i = 100
        n_sim = 100
        start_states_list = [0 for i in range(n_sim)]
        # seeds_list = [i+1 for i in range(n_sim)]
    
        # simulations
        sim_batches = list()
        for i in range(n_batches):
            # print("Doing batch " + str(n_batches - i))
            sse_sim = distsse.DnSSE(self.event_handler, stop_condition_value, n=n_sim, stop=stop_condition, origin=start_at_origin,
                start_states_list=start_states_list, epsilon=1e-12, runtime_limit=3600,
                condition_on_speciation=True, condition_on_survival=True,
                debug=False)

            trs = sse_sim.generate()

            sim_batches.append(trs)

            # printing progress
            pjh.print_progress(i , n_batches)


        # "expectations" from diversitree
        n1_ci_width_maxtaxa_divtree = [
            0.731574225125986,   0.8090309214852, 0.959189135666057, 0.998047953342783, 0.892722522071747,  1.03000873115844, 0.806696522362604, 0.880679145645994,  1.15464033212324,  1.14764230446159,
             1.03824887228837, 0.800891320638916,   1.0207369918175,  1.00445038310571, 0.942868265271753, 0.968016264993998, 0.908748429145684,  1.23574240132167, 0.783296856404087,  1.09984618649127,
            0.857372859261348,  1.09106666666667,   0.8544895235511, 0.964305191641247,  1.02011904949938,  1.01240606617517,  1.12440994429447, 0.961298569539131,  1.06718464393114,   1.1636121614276,
            0.831788530817779,  1.04730631988772,  1.00136860769891, 0.894322849530257, 0.926000088138399,  1.08606182907128,  0.99058621639977,  1.07045214349599,   0.8267277944164, 0.909774797308753,
             0.92432866514683,  1.04105377770834, 0.846530339776204,  1.12227343505507,  1.24815271987093,  1.01210897644573, 0.982765834394198,  0.90331992296878,  1.00682730887625, 0.978414879674097,
            0.988916046931582, 0.760715804324779, 0.936423955613303,  1.08558474044492, 0.841343820709741,  1.01641686826863, 0.847045870700464,  1.25225131630672, 0.980852921768302,  1.08092074481234,
            0.875074312803943,  1.11293529447896,  1.14570662770522, 0.984180336599698, 0.953915482354044,  1.03901103249993, 0.730969298088144, 0.751498585252403, 0.926509094080647, 0.950769900468228,
            0.813259851623469,  1.13649274844705, 0.887440861367248,  1.08786108664589, 0.841509841735302, 0.851350332285616, 0.901298676041601, 0.908460154838556, 0.869015945036265, 0.970322479770244,
            0.959423746239629, 0.871869044007751, 0.971249824824809, 0.721229534905637, 0.997190282237998, 0.933252681363803, 0.822634148957058, 0.875783524749251, 0.923314272639932,  1.06608415230599,
            0.877697745079234, 0.831940133821314,  1.08393923121626,  1.02224699934838, 0.901460112116656, 0.927463511765593, 0.853378478919423, 0.826077462555065,  1.28995774357225,  0.878784666744391
            ]

        n1_mean_maxtaxa_divtree = [
            4.26, 4.18,  4.3,  4.1, 4.61, 4.86, 3.64, 3.75, 4.77, 4.91,
            4.98, 4.01, 4.64, 4.86,  3.9, 4.54, 4.59, 4.87, 4.22, 4.92,
            4.42, 4.89, 4.06, 4.42, 4.61, 4.69, 5.28, 4.84, 4.52, 4.87,
            3.99, 4.56, 5.17, 4.22, 4.68, 5.23, 4.82, 4.48, 3.92,  4.1,
            4.39, 4.49, 4.65, 4.89, 4.55, 4.96, 5.01, 4.54, 4.58,  4.5,
            5.24, 4.13, 4.39, 4.36, 4.09, 4.42,  4.1, 5.22, 5.13,  4.9,
            4.31,  5.2, 5.45, 4.72,  4.5, 4.86, 3.52, 3.69, 3.41, 4.38,
            3.34, 4.88, 4.38, 5.11, 3.97, 3.96, 4.84, 4.46, 4.28, 3.58,
            4.72, 4.48,  4.3, 3.43, 4.21, 4.93, 4.02, 4.21, 4.48, 4.97,
            4.26, 3.94, 4.04, 4.99, 4.09, 4.45, 4.65, 4.29, 4.91, 4.72
            ]

        n2_ci_width_maxtaxa_divtree = [
            1.06410404594948,  1.06500074149924, 1.03852540681779, 1.24258154149848, 1.16587761438205, 1.26522976617377, 1.26087178370741, 1.12459628599095, 1.27347600723771, 1.51335058273443,
            1.42398329124234, 0.954726677477313,  1.2168083198568, 1.14084626466319, 1.23366816814365,  1.1991405434011, 1.33817392537198, 1.65504481260091, 1.18165522394767, 1.41974637143115,
            1.36060418843092,  1.35864775554091, 1.20673883929483, 1.43129893058259, 1.24618633494921, 1.35977829208896, 1.16809382769666, 1.17017154988558, 1.29083733156647, 1.38589569243253,
            1.09474502432431,  1.37654036606049, 1.56189404573454, 1.23891771341202, 1.14953421502587, 1.28522021066391, 1.36434226577564, 1.21457396712434,   1.113980795221,  1.2460119486432,
            1.11571416346009,  1.15267096061033, 1.34548458830777, 1.23047615584416, 1.36006933869586, 1.18382059519851,  1.2938099615344, 0.98940837336912, 1.17963062460461, 1.45837219342164,
             1.4008824572354,  1.10044404260693, 1.27200188297936, 1.30307433464717, 1.00195938626133, 1.15752692906694, 1.20677742602337, 1.42918270294033,  1.4591914827857, 1.36389281488871,
            1.11178236297679,  1.14129515300058, 1.33779110023904,  1.0049273764403,  1.1414583413557,  1.2726911380729, 1.15330872560891, 1.24251908279556,    1.04026513792, 1.10506075448869,
            1.10709028474911,  1.45167159655427,  1.0392948316386, 1.28177515543519, 1.31595258027611, 1.23851047454414,  1.1480750160265,  1.1489686576063, 1.12864504445093, 1.33790711942273,
            1.25154305341265,  1.34784740976121, 1.07082001920741, 1.04231473251421, 1.11457106955587, 1.45627399131406,  1.0011070042405,    1.19232560396, 1.42738552039678, 1.15300755602139,
            1.26318552201579,  1.30591066008407, 1.35129775020051, 1.28362505554867, 1.28038029388526, 1.39444270755254, 1.27947077127438, 1.01394761604375, 1.54161875253962, 1.16561964168888
            ]

        n2_mean_maxtaxa_divtree = [
            5.86, 5.52, 5.84, 5.51, 7.03, 6.92, 5.01, 5.74, 6.87, 7.14,
            6.62, 5.51, 5.94, 6.17, 6.33, 5.94, 6.15, 7.01, 6.58, 7.07,
            6.85, 7.36, 5.95, 6.19, 6.83, 6.48, 6.24, 5.82, 5.86, 6.68,
            6.07, 6.78, 7.25, 6.38, 6.19, 6.45,  7.1, 5.94,  5.6, 5.99,
            5.98,  5.6, 6.87, 6.04,  5.9, 6.38, 7.04, 5.85, 6.14,  6.7,
            7.81, 5.95, 6.06, 6.04, 5.78, 5.47, 5.51, 6.61, 7.22, 6.96,
            6.19, 6.25, 6.83, 5.57, 5.73, 6.28, 5.89, 6.21, 4.82, 6.01,
            4.88, 6.85, 5.38, 6.98, 6.18, 5.48, 5.75, 5.86, 6.75, 5.53,
            6.21, 6.77, 5.49, 5.68, 6.19, 7.26, 5.18, 6.06, 7.12,  6.4,
            6.14, 5.97, 5.23, 6.91, 6.45,  6.5, 6.45, 5.84, 7.21, 7.08
            ]

        n3_ci_width_maxtaxa_divtree = [
            0.438087780512471, 0.456891908176951, 0.451458017780371, 0.487236327450939, 0.499727208008772, 0.554217702913054,  0.48162918633666,  0.40394909370245,  0.50595862968181, 0.488099668576661,
             0.46623637131759, 0.429793850513701, 0.513136138432733, 0.510174578953226, 0.497637926061253, 0.500095911609044, 0.551198797846543, 0.585351002701487,  0.45637778963123, 0.519822869598458,
            0.480681576703142, 0.470069917859852, 0.448037031297795, 0.560289823991733, 0.503991436515352, 0.482116378087492, 0.486586819518668, 0.592274028851954, 0.531103050359354, 0.533290439184177,
            0.378728471268658, 0.551462732240815, 0.507218678558655,    0.530254840962, 0.440547714197734, 0.517724742590992, 0.452724045098227, 0.570298119452015, 0.470610306523413, 0.434713327110726,
            0.395920196019553, 0.413879881076135, 0.522666666666667, 0.617583025621133, 0.520922772538785, 0.471537009698233, 0.519610077584406, 0.433712423458939, 0.497013722957506, 0.569481033995697,
            0.565130758445702, 0.460360887859413, 0.505344704437506, 0.468962449876255, 0.455190129661677, 0.505590363992053, 0.413255928236029, 0.564086102747738, 0.641997660085732, 0.509188645163692,
            0.423390062531592, 0.486538968717623, 0.593645024021472, 0.448768280627062, 0.531866011835175, 0.600291463214396, 0.420668451228026, 0.444580993972999, 0.465090574865029, 0.479598613320545,
              0.5095048085141, 0.548262362912008,  0.51547130537661, 0.472486534039315, 0.552394290449505,  0.43004206324686, 0.466173945945918, 0.453819836988694, 0.449735678151089, 0.523034037558211,
            0.402259677925651, 0.395763349347648, 0.512833563880548, 0.364910872749093, 0.501738190813907, 0.575159390820045,  0.33626045460823, 0.372191541868409, 0.509889272986862, 0.560068157468447,
            0.514435181102105, 0.465257411536774,  0.48127455529641, 0.423751928573425, 0.535758683805244,  0.46978503573228, 0.513695431519141, 0.494041915368943, 0.645674134904635, 0.476575208009071
            ]

        n3_mean_maxtaxa_divtree = [
            1.79, 2.02, 2.26, 2.11, 2.38, 2.38, 1.89, 1.93, 2.27, 2.02,
            2.41, 2.14, 2.12, 2.35, 1.91, 2.43, 2.48, 2.49, 2.05, 2.42,
            2.16, 2.16, 2.13,  2.3, 2.29,  2.3, 2.28,  2.6, 2.03, 2.53,
            1.94, 2.23,  2.5, 2.21, 2.28, 2.45, 2.41, 2.28, 1.75,  1.9,
            1.98, 1.84,  2.6, 2.53, 2.13,  2.3, 2.61, 2.18, 2.29, 2.32,
            2.64, 2.28, 2.17, 1.82, 2.02, 2.05, 1.83,  2.4, 2.72, 2.28,
            2.02, 2.14, 2.59,  2.1,  2.3, 2.44, 2.14, 2.08, 1.84, 2.18,
            2.01, 2.56, 2.35, 2.37, 2.42, 1.79, 2.14, 1.95, 2.26, 2.01,
             2.1, 2.06, 2.32, 1.78, 2.25, 2.57, 1.81, 1.99,  2.2, 2.42,
             2.0, 2.04, 1.97, 2.05, 2.27, 2.15, 2.14,  2.3, 2.42, 2.13
            ]

        root_ages_ci_width_maxtaxa_divtree = [
             0.12692952540925, 0.139613278777909, 0.109372133047407,  0.13921837456182, 0.130103817029074,  0.12840913500313, 0.135702021259288, 0.145513306197362, 0.150240697805724, 0.136045062144244,
            0.131087019568962, 0.126804012902848, 0.162174213602609, 0.118286685685816, 0.134569812219664, 0.114935903194279, 0.144151991158098, 0.144582552987022, 0.142140594220997, 0.127828897449516,
            0.114272855840606, 0.117214680734728, 0.141983187822582, 0.132333333755836, 0.149592079996444, 0.137316210918328, 0.120096073307902, 0.123477608172767, 0.124910846181645, 0.143964549733037,
            0.132569541138113, 0.117359210632105, 0.123529536451926, 0.144760437070485, 0.129531155099021, 0.136388571197958, 0.119949736989869,  0.14769593405573, 0.163781345655721, 0.137148548436855,
            0.126659086897886, 0.150358423016841, 0.133122251033155, 0.137773076016279, 0.118696887877621, 0.141163096602117, 0.125634750872414, 0.116721853474592, 0.133018580251566, 0.131543450078212,
            0.137691248438227, 0.134808180391327, 0.136716579182557, 0.133689988682135,  0.12458963205751, 0.143071942728272, 0.135218790423002, 0.128251528916036, 0.137629123534693, 0.125605979715581,
             0.12974569709136, 0.136974297749045, 0.144979153807272, 0.133947431567988, 0.162198439495914, 0.130786968579638, 0.121711800350963, 0.131630822067461, 0.143683000144826, 0.135341387790975,
            0.142369985472937, 0.127998164562652, 0.140335873071315, 0.149482608458925, 0.144721086492454, 0.139700107998867, 0.132567441706095, 0.127813309102368, 0.109946699354391, 0.142354789594405,
            0.135482260271418, 0.128255235865071, 0.139364713914018, 0.142113974347538, 0.135827563839668, 0.124961026953989, 0.139300047992765, 0.133679671667615, 0.116341401356578, 0.161942912435866,
            0.152143911819712, 0.137530614439772, 0.156173156758097, 0.134162533913284,    0.124308565664, 0.144581241284565, 0.122850528054223, 0.134561134236951, 0.131863194311972, 0.129588495403706
            ]

        root_ages_mean_maxtaxa_divtree = [
            2.30377832723862, 2.20167662640125, 2.39642037011796, 2.18675638484214, 2.34127075710877, 2.28923877812535, 2.26994948684771, 2.20526460927574, 2.28081926157237, 2.24673458487209,
            2.36760192753108, 2.38237932086301, 2.15922109041031, 2.37026031935458, 2.15352354984275, 2.36563301173885, 2.23545011262783, 2.16473497963318, 2.27202660871667, 2.33970854822697,
            2.36897102719439, 2.34310561113993, 2.25327013030979, 2.32036037211262, 2.24623415370481, 2.20779920139833, 2.27324547965023, 2.33040604856689, 2.25541116116714, 2.15750551391841,
            2.31626564921671, 2.31553029279107, 2.33529654351746,  2.2549026248901, 2.20465363473376, 2.18380132620389, 2.37074842169708, 2.19660982150253, 2.13099352201886, 2.27358879272019,
            2.23690007630279, 2.22599732138642, 2.34045326859406, 2.21320543364603, 2.25512605256691, 2.29794388858916, 2.29090556838208,  2.3479702401512, 2.23472756175958, 2.26624022364857,
            2.26648453019035, 2.28020943365781,  2.1958107052627, 2.19221488487551, 2.23472952984318, 2.21472008265084, 2.26691225625441, 2.27938931641737,  2.2179135987607, 2.24505762234362,
            2.28600476065899, 2.27710792307573, 2.25044910231106, 2.20586743170661, 2.17862500438784, 2.25731446121052, 2.31840181195581, 2.30338685556503,  2.1410242363329,  2.1475598669109,
            2.24440782767709, 2.22878519017917, 2.16784150867132, 2.21378602387227, 2.17325351368281, 2.14361639210152, 2.30139999552004, 2.25351862317179, 2.38879858829186, 2.13914458245415,
            2.26877368080396, 2.29778909094639, 2.23707054599823, 2.18505836877182, 2.19261838722073, 2.35482199587891, 2.13165555798845, 2.32855301315135, 2.30877278900578, 2.15730049114836,
            2.08863023542047, 2.15087912576412, 2.14911084468646,  2.2204544036158, 2.28541977098519, 2.19151783110798, 2.33059151300222, 2.26478548094598, 2.26189328022624, 2.34903406859452
            ]

        
        # parsing simulations
        n1_ci_overlap_count = 0
        n2_ci_overlap_count = 0
        n3_ci_overlap_count = 0
        root_age_ci_overlap_count = 0
        for i, batch in enumerate(sim_batches):
            n1s = [ann_tr.state_count_dict[0] for ann_tr in batch]
            n2s = [ann_tr.state_count_dict[1] for ann_tr in batch]
            n3s = [ann_tr.state_count_dict[2] for ann_tr in batch]
            root_ages = [ann_tr.root_age for ann_tr in batch]
            
            mean_n1 = statistics.mean(n1s)
            mean_n2 = statistics.mean(n2s)
            mean_n3 = statistics.mean(n3s)
            mean_root_ages = statistics.mean(root_ages)
            
            stdevs_n1 = statistics.stdev(n1s)
            stdevs_n2 = statistics.stdev(n2s)
            stdevs_n3 = statistics.stdev(n3s)
            stdevs_root_ages = statistics.stdev(root_ages)
            
            sterr_n1 = stdevs_n1 / math.sqrt(n_sim)
            sterr_n2 = stdevs_n2 / math.sqrt(n_sim)
            sterr_n3 = stdevs_n3 / math.sqrt(n_sim)
            sterr_root_ages = stdevs_root_ages / math.sqrt(n_sim)
            
            n1_ci_width_maxtaxa = 1.96 * sterr_n1
            n2_ci_width_maxtaxa = 1.96 * sterr_n2
            n3_ci_width_maxtaxa = 1.96 * sterr_n3
            root_ages_ci_width_maxtaxa = 1.96 * sterr_root_ages

            if abs(mean_n1 - n1_mean_maxtaxa_divtree[i]) <= (n1_ci_width_maxtaxa + n1_ci_width_maxtaxa_divtree[i]):
                n1_ci_overlap_count += 1

            if abs(mean_n2 - n2_mean_maxtaxa_divtree[i]) <= (n2_ci_width_maxtaxa + n2_ci_width_maxtaxa_divtree[i]):
                n2_ci_overlap_count += 1

            if abs(mean_n3 - n3_mean_maxtaxa_divtree[i]) <= (n3_ci_width_maxtaxa + n3_ci_width_maxtaxa_divtree[i]):
                n3_ci_overlap_count += 1

            if abs(mean_root_ages - root_ages_mean_maxtaxa_divtree[i]) <= (root_ages_ci_width_maxtaxa + root_ages_ci_width_maxtaxa_divtree[i]):
                root_age_ci_overlap_count += 1

        # [==== * ====][.... + ....] if we take '+' to be the "truth" of the '*' interval, + cannot be more than '====' away from '*' 95% of the time
        # then abs('+' - '*') can be at most ('====' + '....'). '....' can be added because we still are guaranteed to see '+' falling within that range
        # 95% of the time
    
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n1_ci_overlap_count) + " times for state 1 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n2_ci_overlap_count) + " times for state 2 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(n3_ci_overlap_count) + " times for state 3 count.")
        print("\n95% CIs of simulations here and from diversitree overlapped " + str(root_age_ci_overlap_count) + " times for root age.")
        exp_count = int(0.95 * n_batches)
        a_delta = math.ceil(0.07 * exp_count)
        self.assertAlmostEqual(n3_ci_overlap_count, exp_count,
                                msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        self.assertAlmostEqual(n2_ci_overlap_count, exp_count,
                                msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        self.assertAlmostEqual(n1_ci_overlap_count, exp_count,
                                msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
        self.assertAlmostEqual(root_age_ci_overlap_count, exp_count,
                                msg="Mean absolute difference must be 1.96 * (stderr_python + stderr_divtree) apart " + str(exp_count) + " (+/- " + str(a_delta) + ") out of 100 times.", delta=a_delta)
    
if __name__ == '__main__':
    # Assuming you opened the PhyloJunction/ (repo root) folder
    # on VSCode and that you want to run this as a standalone script,
    # i.e., "Run Without Debugging", you will need to configure your
    # launch.json to have:
    # 
    # "env": {"PYTHONPATH": "${workspaceRoot}/src/phylojunction/"}
    # 
    # and your settings.json to have:
    #   
    # "python.analysis.extraPaths": [ "${workspaceFolder}/src/phylojunction/" ]
    # 
    # If you want to run this as a standalone from PhyloJunction/
    # on the terminal, remember to add "src/phylojunction" to
    # PYTHONPATH (system variable), or to set it if it does not
    # exist -- don't forget to export it!
    # 
    # Then you can do:
    # $ python3 tests/distribution/test_dn_discrete_sse_classe.py
    # 
    # or
    #
    # $ python3 -m tests.distribution.test_dn_discrete_sse_classe
    #
    # or 
    #
    # $ python3 -m unittest tests.distribution.test_dn_discrete_sse_classe.TestClaSSETrees.test_tree_size_state_count_max_taxa_classe

    unittest.main()